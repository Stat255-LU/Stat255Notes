# Simulation-Based Inference

**Learning Outcomes:**

14. Define population, sample, and sampling distribution, and a parameter and statistic.\
15. Interpret standard deviation and standard error in context.\
16. Explain how to use bootstrapping to calculate confidence intervals.\
17. Interpret confidence intervals in context.\
18. Calculate confidence intervals in R.
19. Write null and alternative hypotheses, identify test statistics, and state conclusions in context.\
20. Interpret p-values in context.\
21. Explain how to use simulation to perform hypothesis tests.
22. Compare and contrast the conclusions we can draw from confidence intervals and hypothesis tests.\
23. Perform hypothesis tests in R.

```{r, include=FALSE}
knitr::opts_chunk$set(echo = TRUE, message=FALSE, warning=FALSE, fig.height = 3, fig.width = 7, cache=TRUE)
library(ggformula)
library(moderndive)
library(gridExtra)
library(skimr)
library(Bolstad)
library(GGally)
library(Lock5Data)
library(knitr)
library(caret)
library(MASS)
library(tidyverse)
library(nycflights13)
options(scipen=999)
select <- dplyr::select
set.seed(07302020)
```

```{r, echo=FALSE}
load("Environment.Rdata")
```

## Sampling Distributions

### Population and Sample

In statistics, we often do not have the time, money, or means to collect data on all individuals or units on which we want to draw conclusions. Instead, we might collect data on only a subset of the individuals, and then make inferences about all individuals we are interested in, using the information we collected.

**Vocabulary:**

1.  A **population** is the entire set of individuals that we want to draw conclusions about.
2.  A **sample** is a subset of a population.\
3.  A **parameter** is a numerical quantity pertaining to an entire population or process.\
4.  A **statistic** is a numerical quantity calculated from a sample.

We'll work with a dataset containing information on all 20,591 flights from New York to Chicago in 2013. Our population of interest is all 20,591 flights. We're interested in the proportion of fights that arrive on time, and the average arrival delay (in minutes). Arrival delay represents how much earlier/later did the flight arrive than expected. Whether or not the flight arrived on time is a categorical variable, while arrival delay is a quantitative variable.

In this situation, we have information on the entire population. In statistics, this is rare. It is more common to have information on only subset of flights contained in a sample. If the sample is collected in a way that is representative of the population, such as by sampling at random, then we can use the sample to draw conclusions about the population.

We'll begin by studying the behavior of sample statistics when we know the population parameters, and then use what we learn to handle more real situations where we don't know about the entire population.

The parameter of interest is the proportion of on-time arrivals out of all flights in the population of 20,591. When the parameter is proportion, we'll denote it with the letter $p$.

```{r, echo=FALSE}
data(flights)
Flights_NY_CHI <- flights %>% filter(dest %in% c("ORD", "MDW")) %>% filter(!is.na(arr_delay))
Flights_NY_CHI <- Flights_NY_CHI %>% mutate(ontime = ifelse(arr_delay <= 0, "Y", "N")) %>% select(year, month, day, carrier, origin, dest, sched_dep_time,arr_delay, ontime)
```

The first 10 flights, all of which occurred on January 1 are shown below. We see that most of those flights were not on-time.

```{r}
head(Flights_NY_CHI, 10)
```

Note that a negative arrival delay denotes a flight that arrived before expected, thus on time.

The bar graph shows the number of flights that arrived on time throughout the year.

```{r}
on_time_plot_POP <- ggplot(data=Flights_NY_CHI, aes(x=ontime)) + 
                  geom_bar(fill="blue") + 
                  ggtitle("On-time Flights")
on_time_plot_POP
```

We see that the majority of flights did arrive on time.

We'll calculate the proportion of flights arriving on time, among all 20,591 flights in the population.

```{r}
#proportion of flights on time
p <- sum(Flights_NY_CHI$ontime=="Y")/20591
p
```

When the population parameter is a proportion, we'll denote it with the letter $p$. Here $p$=`r p`. Keep in mind that in a real situation, we typically won't know the value of the population parameter $p$, and will need to estimate it from a sample.

The histogram shows the distribution of arrival delay times. Negative delays indicate the flight arriving ahead of schedule.

```{r}
Delay_plot_POP <- ggplot(data=Flights_NY_CHI, aes(x=arr_delay)) + 
  geom_histogram(fill="blue", binwidth=5) + 
  ggtitle("Distribution of Arrival Delays")
Delay_plot_POP
```

We see that the distribution of arrival delays is heavily right-skewed. While most flights arrive around the scheduled time, a few were late by 3 or more hours.

We'll calculate the mean arrival delay.

```{r}
#proportion of flights on time
mu <- mean(Flights_NY_CHI$arr_delay)
mu
```

When the population parameter represents a mean, we'll denote it using $\mu$. Here $\mu=$ `r mu`.

We also calculate the standard deviation of arrival delays.

```{r}
# mean arrival delay in sample
SD_delay <- sd(S1$arr_delay)
SD_delay
```

### Sampling Variability

We typically won't have data on the full population and won't know the values of parameters like $p$ and $\mu$. Instead, we'll have data on just a sample taken from the population.

To illustrate, we'll take a sample of 75 flights. The first 6 flights in the sample are shown below. The `ontime` variable tells whether or not the flight arrived on time.

```{r}
# take sample of 75 flights
set.seed(08082023)
S1 <- sample_n(Flights_NY_CHI, 75)
head(S1)
```

We'll calculate the number, and proportion of flights that arrived on time.

```{r}
num_ontime <- sum(S1$ontime == "Y") # count number of on-time arrivals
num_ontime
```

Proportion of on-time arrivals in the sample.

```{r}
# proportion of on-time flights in sample
p_hat <- num_ontime/75
p_hat
```

When the sample statistic is a proportion, it is commonly denoted $\hat{p}$.

In our sample $\hat{p}$ = `r p_hat*100` percent of flights arrived on-time. The sample statistic $\hat{p}$ is an estimate of the population proportion $p$, the proportion of all flights arriving on time.

We also calculate the mean arrival delay in minutes.

```{r}
# mean arrival delay in sample
y_bar <- mean(S1$arr_delay)
y_bar
```

We'll denote this sample mean $\bar{y}$. It is an estimate of the population mean, representing the arrival mean delay for all flights, which we'll denote $\mu$.

Of course, this was just one sample of 75 flights. If we took different samples of 75 flights, we would expect the statistics $\hat{p}$ and $\bar{x}$ to vary from sample to sample.

Here's a different sample of 75 flights.

```{r}
S2 <- sample_n(Flights_NY_CHI, 75)
```

Proportion arriving on time in second sample:

```{r}
# proportion arriving on time in second sample
num_ontime2 <- sum(S2$ontime == "Y") # count number of on-time arrivals
p_hat2 <- num_ontime2/75
p_hat2
```

Mean arrival delay in second sample:

```{r}
# mean arrival delay in second sample
y_bar2 <- mean(S2$arr_delay)
y_bar2
```

Sample statistics will vary from sample to sample, thus it is not realistic to expect them to exactly match their corresponding population parameters.

Nevertheless we can use the sample to estimate the proportion of all flights in the population that arrive on time.

Let's take 10,000 more random samples of 75 flights and record the proportion of on-time arrivals in each sample.

```{r}
nreps <- 10000  # number of repetitions
p_hat_val <- rep(NA, nreps) # create vector to hold proportion of on-time arrivals
y_bar_val <- rep(NA, nreps) # create vector to hold mean arrival delay

Sample <- 1:nreps

for(i in 1:nreps){
S <- sample_n(Flights_NY_CHI, 75) # take sample of 75
N_ontime <- sum(S$ontime == "Y") # count number of on-time arrivals
p_hat_val[i] <- N_ontime/75 # record proportion on-time
y_bar_val[i] <- mean(S$arr_delay) # record mean arrival delay
}

Samples_df <- data.frame(Sample, p_hat_val, y_bar_val) # store results in a data frame
```

The table shows the proportion of on-time arrivals in the first 20 samples of 75 flights.

```{r}
kable(head(Samples_df, 20) |> round(2))
```

The histogram below shows the distribution of the proportion of on-time arrivals in the 10,000 different samples.

```{r}
Prop_Samp_Dist<- ggplot(data=Samples_df, aes(x=p_hat_val)) +
  geom_histogram(color="blue", fill="blue", binwidth=0.001) + 
  ggtitle("Sampling Distribution for Proportion On Time") + 
  xlab("Prop. on time in sample")
Prop_Samp_Dist
```

We notice that most of our 10,000 samples yielded proportions of on-time arrivals between 0.5 and 0.7, The distribution of proportion of on-time arrivals is roughly symmetric and bell-shaped.

The distribution shown in this histogram is called the **sampling distribution for** $\hat{p}$. The sampling distribution for a statistic shows the distribution of the statistic over many samples.

We'll calculate the mean of the sampling distribution for $\hat{p}$. How does it compare to the true population parameter $p$?

```{r}
Mean_p_hat <- mean(Samples_df$p_hat_val)
Mean_p_hat
```

We can gauge how much the proportion of on-time arrivals varies between samples by calculating the standard deviation of this sampling distribution. The standard deviation of a sampling distribution for a statistic is also called the **standard error** of the statistic. In this case it represents the standard error $\hat{p}$ (the proportion of on-time arrivals), and is denoted $\text{SE}(\hat{p})$. This standard error is shown below.

```{r}
SE_p_hat <- sd(Samples_df$p_hat_val)
SE_p_hat
```

Now, we'll examine the sampling distribution of the mean arrival time $\bar{y}$.

```{r}
Mean_Samp_Dist<- ggplot(data=Samples_df, aes(x=y_bar_val)) +
  geom_histogram(color="white", fill="blue", binwidth=0.5) + 
  ggtitle("Sampling Distribution for Mean Arrival Delay") + 
  xlab("Mean Arrival Delay")
Mean_Samp_Dist
```

How does the sampling distribution for mean arrival delays compare to the distribution of arrival delays for individual flights? Think about the shape and the variability of the distributions.

```{r}
mean_y_bar <- mean(Samples_df$y_bar_val)
mean(mean_y_bar)
```

The standard error of the mean, $SE(\bar{y})$ is shown calculated below.

```{r}
SE_y_bar <- sd(Samples_df$y_bar_val)
SE_y_bar
```

What does this standard error represent? How is it different than the the standard deviation of flight times, which we previously saw was 60.1 minutes?

**Vocabulary:**

-   The **sampling distribution** of a statistic is the distribution of values the statistic takes on across many different samples of a given size.\
-   The **standard error** of a statistic is the standard deviation of that statistic's sampling distribution. It measures how much the statistic varies between different samples of a given size.

### Sample Size and Standard Error

**Question:**

Suppose the sample consisted of 10, or 30, or 500 flights, instead of 75? Would you expect the standard deviation of individual flight times to increase, decrease or stay about the same? What about the standard error of the mean delay?

The histogram shows the distribution of individual flight delays in random samples of each size.

```{r, echo=FALSE}
set.seed(08282024)
FlightsSample10 <- sample_n(Flights_NY_CHI, 10, replace=FALSE)
FlightsSample30 <- sample_n(Flights_NY_CHI, 30, replace=FALSE)
FlightsSample75 <- sample_n(Flights_NY_CHI, 75, replace=FALSE)
FlightsSample200 <- sample_n(Flights_NY_CHI, 200, replace=FALSE)
```

```{r, echo=FALSE, fig.width=12, fig.height=6}

xrange <- c(-100,200)

Flights_Hist10 <- ggplot(data=FlightsSample10, aes(x=arr_delay)) + 
  geom_histogram(color="white", fill="lightblue") + 
  ggtitle("n=10") + 
  xlab("Delay") + ylab("Frequency") + xlim(xrange)

Flights_Hist30 <- ggplot(data=FlightsSample30, aes(x=arr_delay)) + 
  geom_histogram(color="white", fill="lightblue") + 
  ggtitle("n=30") + 
  xlab("Delay") + ylab("Frequency") + xlim(xrange)


Flights_Hist75 <- ggplot(data=FlightsSample75, aes(x=arr_delay)) + 
  geom_histogram(color="white", fill="lightblue") + 
  ggtitle("n=75") + 
  xlab("Delay") + ylab("Frequency") + xlim(xrange)

Flights_Hist200 <- ggplot(data=FlightsSample200, aes(x=arr_delay)) + 
  geom_histogram(color="white", fill="lightblue") + 
  ggtitle("n=200") + 
  xlab("Delay") + ylab("Frequency") + xlim(xrange)

grid.arrange(Flights_Hist10, Flights_Hist30, Flights_Hist75,Flights_Hist200, ncol=2)
```

For each sample, most of the flights have delays slightly below or above 0, though a small percentage of the flights in each sample have much larger delays. The variability in delays is about the same, regardless of sample size.

The table shows the standard deviation in each of the samples.

```{r, echo=FALSE}
SD10 <- sd(FlightsSample10$arr_delay)
SD30 <- sd(FlightsSample30$arr_delay)
SD75 <- sd(FlightsSample75$arr_delay)
SD200 <- sd(FlightsSample200$arr_delay)
Sample_Size <- c(10,30, 75, 200)
SD <- c(SD10, SD30, SD75, SD200)
kable(data.frame(Sample_Size, SD))
```

Sample size does not impact the amount of variability between individual flights. Standard deviation in delay times does not systematically increase or decrease based one sample size (of course it varies a little based on the lakes randomly chosen in the sample).

Now, we'll examine what happens to the standard error of the mean as the sample size changes.

```{r, echo=FALSE}
set.seed(09012024)
Mean10 <- rep(NA, 10000)
Mean30 <- rep(NA, 10000)
Mean75 <- rep(NA, 10000)
Mean200 <- rep(NA, 10000)

for (i in 1:10000){
Sample <- sample_n(Flights_NY_CHI, 10, replace=FALSE) 
Mean10[i] <- mean(Sample$arr_delay)
Sample <- sample_n(Flights_NY_CHI, 30, replace=TRUE) 
Mean30[i] <- mean(Sample$arr_delay)
Sample <- sample_n(Flights_NY_CHI, 75, replace=TRUE) 
Mean75[i] <- mean(Sample$arr_delay)
Sample <- sample_n(Flights_NY_CHI, 200, replace=TRUE) 
Mean200[i] <- mean(Sample$arr_delay)
}
Flights_Results_Mean_Comp <- data.frame(Mean10, Mean30, Mean75, Mean200)
```

**Distributions of Mean Between Different Samples**

```{r, echo=FALSE, fig.width=12, fig.height=6}
Flights_Mean10 <- ggplot(data=Flights_Results_Mean_Comp, aes(x=Mean10)) +  
  geom_histogram(color="white", fill="lightblue", bins=60) +
  xlab("Sample Mean") + ylab("Frequency") +
  ggtitle("n=10") + xlim(c(-50,100)) + 
  theme(legend.position = "none")

Flights_Mean30 <- ggplot(data=Flights_Results_Mean_Comp, aes(x=Mean30)) +  
  geom_histogram(color="white", fill="lightblue", bins=60) +
  xlab("Sample Mean") + ylab("Frequency") +
  ggtitle("n=30") + xlim(c(-50,100)) +
  theme(legend.position = "none") 

Flights_Mean75 <- ggplot(data=Flights_Results_Mean_Comp, aes(x=Mean75)) +  
  geom_histogram(color="white", fill="lightblue", bins=100) +
  xlab("Sample Mean") + ylab("Frequency") +
  ggtitle("n=75") + xlim(c(-50,100)) +
  theme(legend.position = "none") 

Flights_Mean200 <- ggplot(data=Flights_Results_Mean_Comp, aes(x=Mean200)) +  
  geom_histogram(color="white", fill="lightblue", bins=100) +
  xlab("Sample Mean") + ylab("Frequency") +
  ggtitle("n=200") + xlim(c(-50,100)) +
  theme(legend.position = "none") 

grid.arrange(Flights_Mean10, Flights_Mean30, Flights_Mean75, Flights_Mean200, ncol=2)
```

Notice that as the sample size increases, the sampling distribution of the mean becomes more symmetric and bell-shaped, and also more concentrated around the population mean $\mu$.

The table shows the standard error of the mean for samples of different size:

```{r, echo=FALSE}
SE10 <- sd(Flights_Results_Mean_Comp$Mean10)
SE30 <- sd(Flights_Results_Mean_Comp$Mean30)
SE75 <- sd(Flights_Results_Mean_Comp$Mean75)
SE200 <- sd(Flights_Results_Mean_Comp$Mean200)
Sample_Size <- c(10,30,75,200)
SE <- c(SE10, SE30, SE75, SE200)
kable(data.frame(Sample_Size, SE))
```

As sample size increases, variability between means of different samples decreases. Standard error of the mean decreases. This is also true of standard errors for other statistics (i.e. difference in means, regression slopes, etc.)

\newpage

## Confidence Intervals

### Constructing Confidence Intervals

We saw that while statistics calculated from individual samples deviate from population parameters, over many samples, they approximately average to the population parameter (assuming the samples are chosen randomly).

Thus, when we have only a single sample, we can use the sample statistic as an estimate of the population parameter, provided we allow for a certain margin of error. The question is how much margin of error do we need?

The sampling distribution for the proportion of on-time flights is shown again below. The true proportion of on-time flights ($p=0.607984$) is marked by the green dotted line. The gold bar at the bottom of the histogram represents the range of sample proportions that lie within $\pm 2$ standard errors of the true population proportion of flights that arrived on time:

`r round(p,3)` - 2(`r round(SE_p_hat,3)`) = `r round(p -2*SE_p_hat,3)` to `r round(p,3)` + 2(`r round(SE_p_hat,3)`) = `r round(p +2*SE_p_hat,3)`

```{r}
Prop_Samp_Dist + geom_vline(xintercept=p, color="green", linetype="dotted", linewidth=2) + geom_segment(aes(x=p - 2*SE_p_hat,xend=p + 2*SE_p_hat, y=50, yend=50), color="gold", size=10, alpha=0.01) 
```

We calculate the proportion of samples whose proportion of on-time arrivals lies within $\pm 2$ standard errors of the true proportion.

```{r}
Lower <- p - 2*SE_p_hat
Upper <- p + 2*SE_p_hat
sum((Samples_df$p_hat_val >=Lower) & (Samples_df$p_hat_val <= Upper))
```

Approximately 95% 10,000 samples produced proportions within $\pm 2$ standard errors of the true population proportion of on-time flights.

In a real situation, we won't have access to the entire population of flights, only the flights in a single sample. For example, recall our original sample of 75 flights, in which we observed a proportion of on-time arrivals of $\hat{p}=$ `r p_hat`.

Since we now know that 95% of all samples produce proportions that lie within two standard errors of the population proportion, we can obtain an estimate of the population proportion $p$ by adding and subtracting $2\times \text{SE}(\hat{p})$ from our observed sample proportion $\hat{p}$.

Using probability theory, it can be shown generally that if the sampling distribution of a statistic is symmetric and bell shaped, then approximately 95% of all samples will produce sample statistics that lie within two standard errors of the corresponding population parameter. Such an interval is called an approximate 95% **confidence interval** for the population parameter.

**Approximate 95% confidence interval: If the sampling distribution of a statistic is symmetric and bell-shaped, a 95% confidence interval for the population parameter is:**

$$
\text{Statistic} \pm 2\times \text{Standard Error}, 
$$

More generally, if we want to use a level of confidence that is different than 95%, we can adjust the value we multiply the standard error by. In general, a standard error confidence interval has the form:

$$
\text{Statistic } \pm m\times \text{Standard Error}, 
$$

where the value of $m$ depends on the desired level of confidence.

Confidence intervals that are calculated by adding and subtracting a certain number of standard errors from the sample statistic are called **standard error confidence intervals**. This approach works as long as the sampling distribution is symmetric and bell-shaped. Probability theory tells us that in a symmetric and bell-shaped distribution, approximately 95% of the area lies within two standard errors of the center of the distribution, given by the true parameter value. We will, however, see that this approach will not work in all cases. Not all statistics produce sampling distributions that are symmetric and bell-shaped, and we will need an alternative way to calculate confidence intervals in these situations.

```{r, echo=FALSE, fig.cap="Image from https://openintro-ims.netlify.app/foundations-mathematical"}
knitr::include_graphics("Emp_Rule.png")
```

#### Example: 95% Confidence Interval for $p$

We'll calculate a 95% confidence interval for the proportion of on-time flights, using our original sample where $\hat{p}$ = `r p_hat`. The 95% confidence interval is:

$$
\begin{aligned}
& \hat{p} \pm 2\times \text{SE}(\hat{p}) \\
& = `r p_hat` \pm 2(`r SE_p_hat`)
\end{aligned}
$$

The confidence interval is calculated below.

```{r}
c(p_hat - 2*SE_p_hat, p_hat + 2*SE_p_hat) 
```

Based on our sample of 75 flights, we can be 95% confident that the true proportion of on-time arrivals among all 2013 flights from New York to Chicago is between `r round(p_hat - 2*SE_p_hat, 3)` and `r round(p_hat + 2*SE_p_hat, 3)`.

#### Example: 95% Confidence Interval for $\mu$

Likewise, we calculate a 95% confidence interval for average arrival delay using the formula:

$$
\begin{aligned}
\bar{y} \pm 2\times \text{SE}(\bar{y}) \\
& = `r y_bar` \pm 2(`r SE_y_bar`)
\end{aligned}
$$

```{r}
c(y_bar - 2*SE_y_bar, y_bar + 2*SE_y_bar) 
```

Based on our sample of 75 flights, we can be 95% confident that the mean arrival delay among all 2013 flights from New York to Chicago is between `r round(y_bar - 2*SE_y_bar, 1)` and `r round(y_bar + 2*SE_y_bar, 1)` minutes.

Note that this is a statement about what we think is true of the mean overall flight time, not the time of an individual flight. It would be incorrect to say that we are 95% confident that an individual flight would be expected to have a delay in this interval. You might think about whether the interval for the delay time of an individual flight should be wider or narrower than this. We'll talk about such an interval later in the term.

### What does 95% Confidence Mean?

Knowing what we do about the true value of the population parameters $p$ and $\mu$, we can see that our interval for $p$, which was (`r round(c(p_hat - 2*SE_p_hat, p_hat + 2*SE_p_hat),3)`) does indeed contain the true population value of $p=$ `r p`. However, the interval for $\mu$, which was (`r round(c(y_bar - 2*SE_y_bar, y_bar + 2*SE_y_bar),1)`) does not contain the true value of $\mu=$ `r mu`.

Does this mean we did something wrong when we calculated the interval for $\mu$, the average flight delay among all flights in the population? The answer is "no". Notice we claimed to be only "95%" confident that our interval contains the true value of the population parameter $\mu$. This means that we should expect 5% of samples taken randomly to yield a sample mean $\bar{y}$ so different from the population mean $\mu$, that the resulting confidence interval would not contain the true value of $\mu$. This does not mean we did anything wrong, just that we obtained an unusual sample just by chance. Since our procedure, namely adding and subtracting two standard errors, is designed to work 95% of the time, we can expect such samples to be rare.

In a real situation, we won't know the true value of the population parameter, so we won't know for sure whether or not our confidence interval contains this true parameter value.

To further understand the meaning of "95% confidence", let's explore what happens when we calculate confidence intervals based on estimates $\bar{y}$ obtained from many different samples. For each of our 10,000 different samples taken from our population, we'll add and subtract two standard errors from the sample proportion $\hat{p}$ corresponding to that sample.

The table below displays the value of $\hat{p}$, for the first 20 samples we took, along with the lower and upper bounds of the confidence interval, and whether or not the confidence interval contains the true parameter value $p$ (either 1=`TRUE` or 0=`FALSE`).

```{r}
Samples_df_p <- Samples_df %>% mutate(Lower = p_hat_val - 2*SE_p_hat, 
                                     Upper = p_hat_val + 2*SE_p_hat,
                                     Containsp = p >= Lower & p <= Upper) |>
                              select(Sample, p_hat_val, Lower, Upper, Containsp)  
kable(head(Samples_df_p |> round(2), 20))
```

The graphic below visualizes the confidence intervals produced using the estimates from the first 100 samples. The green dotted line indicates the true value of $p$. The black dots indicate the value of $\hat{p}$ for each sample. Intervals that do in fact contain the true value of $p$ are shown in blue, and intervals that do not contain the true value of $p$ are shown in green.

```{r, fig.height=15, fig.width=10}
ggplot(data=Samples_df_p[1:100,], aes(y=Sample, x=p_hat_val)) +    
  geom_point() +
  geom_errorbar(aes(xmin = Lower, xmax = Upper, color=Containsp))  + 
  xlab("Confidence Interval") + 
  ylab("Sample") + 
  geom_vline(xintercept = p, color="green", linetype="dotted", size=2) + 
  ggtitle("100 Different Confidence Intervals for p") + 
  theme_bw() 
```

Out of these 100 samples, `r sum(Samples_df_p$Containsp[1:100]==TRUE)` contain the true value of the population parameter $p$. This is close to the desired 95% confidence level.

The picture shows confidence intervals produced by the first 100 samples, but we actually took 10,000 different samples of 75 flights. Let's calculate how many of these samples produced confidence intervals that contain the true value of $p$.

```{r}
sum(Samples_df_p$Contains == TRUE)
```

Again, notice that close to 95% of the samples produced confidence intervals contain the true population parameter $p$. Note that for the red intervals that do not contain $p$ nothing was done incorrectly. The sample was taken at random, and the confidence interval was calculated using the correct formula. It just happened that by chance, we obtained a sample proportion $\hat{p}$ that was unusually high or low, leading to an interval that did not capture the true population parameter. This, of course, happens rarely, and approximately 95% of the samples do, in fact, result in intervals that contain the true value of $p$.

```{r}
Samples_df_mu <- Samples_df %>% mutate(Lower = y_bar_val - 2*SE_y_bar, 
                                     Upper = y_bar_val + 2*SE_y_bar,
                                     Containsmu = mu >= Lower & mu <= Upper) |>
                              select(Sample, y_bar_val, Lower, Upper, Containsmu)  
kable(head(Samples_df_mu |> round(2), 20))
```

The graphic below visualizes the confidence intervals produced using the estimates from the first 100 samples. The green dotted line indicates the true value of $p$. The black dots indicate the value of $\hat{p}$ for each sample. Intervals that do in fact contain the true value of $p$ are shown in blue, and intervals that do not contain the true value of $p$ are shown in green.

```{r, fig.height=15, fig.width=10}
ggplot(data=Samples_df_mu[1:100,], aes(y=Sample, x=y_bar_val)) +    
  geom_point() +
  geom_errorbar(aes(xmin = Lower, xmax = Upper, color=Containsmu))  + 
  xlab("Confidence Interval") + 
  ylab("Sample") + 
  geom_vline(xintercept = mu, color="green", linetype="dotted", size=2) + 
  ggtitle(expression(paste("100 Different Confidence Intervals for ", mu))) + 
  theme_bw() 
```

Out of these 100 samples, `r sum(Samples_df_mu$Containsmu[1:100]==TRUE)` contain the true value of the population parameter $\mu$.

Out of all 10,000 samples, the proportion containing the true population value of $\mu$ is:

```{r}
sum(Samples_df_mu$Containsmu == TRUE)
```

This brings us back to the question "what does 95% confidence mean?". An approximate 95% confidence interval means that if we take a large number of samples and calculate confidence intervals from each of them, then approximately 95% of the samples will produce intervals containing the true population parameter. In reality, we'll only have on sample, and won't know whether or not our interval contains the true parameter value. Assuming we have taken the sample and calculated the interval correctly, we can rest assured in the knowledge that that 95% of all intervals taken would contain the true parameter value, and hope that ours is among that 95%.

It might be tempting to say that "there is approximately a 95% chance" that the population parameter lies within the confidence interval, but this is incorrect. In the statistical framework used here (known as classical, or frequentist statistics), the population parameter is assumed to be a fixed, but (typically) unknown number. It either is within the interval, or it isn't. We just (typically) don't know which. There's nothing random about whether or not the parameter value is in our interval, so it doesn't make sense to speak of it in terms of chance or randomness. Randomness comes into play due to the fact that we selected a random sample, which will produce a statistic likely to differ from the population parameter due to sampling variability. A different statistical framework, known as *Bayesian statistics* approaches this differently, and would allow us to use randomness and chance to describe our beliefs about any uncertain quantity, including a population proportion. In this class, however, we'll stick to the classical frequentist interpretation.

Of course, you might ask why we needed to calculate a confidence interval for the proportion of on-time flights in the first place, since we actually have data on all 20,591 flights in the population and already know the true proportion of on-time arrivals and mean arrival delay. The answer is that we don't. But, in most real situations, we will only have data from a single sample, not the entire population, and we won't know the true population parameter. We'll be able to build on the ideas of sampling distributions and standard error that we learned about in this section to calculate confidence intervals in those scenarios.

\newpage

## Bootstrapping

### Mercury Concentration in Florida Lakes

A 2004 study by Lange, T., Royals, H. and Connor, L. examined Mercury accumulation in large-mouth bass, taken from a sample of 53 Florida Lakes. If Mercury accumulation exceeds 0.5 ppm, then there are environmental concerns. In fact, the legal safety limit in Canada is 0.5 ppm, although it is 1 ppm in the United States.

In our sample, we have data on 53 lakes, out of more than 30,000 lakes in the the state of Florida. We'll attempt to draw conclusions about the entire population, consisting of all lakes in Florida, using data from our sample of 53. It is not clear how the lakes in this sample of 53 were selected, or how representative they are of all lakes in the state of Florida. Let's assume for our purposes that the lakes in the sample can be reasonably thought of as being representative of all lakes in Florida.

```{r Bass, echo=FALSE, out.width = '50%', fig.cap="https://www.maine.gov/ifw/fish-wildlife/fisheries/species-information/largemouth-bass.html"}
knitr::include_graphics("Bass.png")
```

```{r}
data("FloridaLakes")
glimpse(FloridaLakes)
```

We are interested in whether mercury levels are higher or lower, on average, in Northern Florida compared to Southern Florida.

We'll divide the state along route 50, which runs East-West, passing through Northern Orlando.

```{r, echo=FALSE, out.width = '30%', fig.cap="from Google Maps"}
knitr::include_graphics("Florida.png")
```

We add a variable indicating whether each lake lies in the northern or southern part of the state.

```{r}
library(Lock5Data)
data(FloridaLakes)
#Location relative to rt. 50
FloridaLakes$Location <- as.factor(c("S","S","N","S","S","N","N","N","N","N","N","S","N","S","N","N","N","N","S","S","N","S","N","S","N","S","N","S","N","N","N","N","N","N","S","N","N","S","S","N","N","N","N","S","N","S","S","S","S","N","N","N","N"))
FloridaLakes <- FloridaLakes %>% rename(Mercury = AvgMercury)
```

Our data come from a sample of 53 lakes, out of more then 30,000 in the entire state of Florida. The mercury levels of the 53 lakes in the sample are shown in the table below.

```{r}
print.data.frame(data.frame(FloridaLakes%>% select(Lake, Location, Mercury)), row.names = FALSE)
```

The histogram shows the distribution of mercury levels in the 53 lakes in the sample. Lakes exceeding the US standard of 1 ppm are shown in red.

```{r}
Lakes_Hist <- ggplot(data=FloridaLakes, aes(x=Mercury)) + 
  geom_histogram(aes(fill=Mercury<=1), color="white", binwidth = 0.1) + 
  ggtitle("Mercury Levels in Sample of 53 Florida Lakes") + 
  xlab("Mercury Level") + ylab("Frequency") + theme_bw()
Lakes_Hist
```

The proportion of lakes with mercury levels exceeding 1 ppm is calculated below.

```{r}
p_hat <- sum(FloridaLakes$Mercury > 1)/53
p_hat
```

We see that in our sample of 53 lakes, approximately 11% have mercury levels exceeding the US standard of 1 ppm. Suppose we want to estimate the proportion of all Florida Lakes whose mercury level exceeds this standard. As we saw in the previous section, we would not expect the population proportion to exactly match the sample, due to random variability between samples. We can use the sample proportion as an estimate ($\hat{p} = 0.1132$), and construct a confidence interval for the unknown population proportion $p$.

In order to construct the confidence interval, we need to know how much the sample proportion of lakes exceeding 1 ppm $\hat{p}$ could vary between different samples of size 53. That is, we need to know the standard error of $\hat{p}$. In the previous section, we calculated the standard error by taking 10,000 different samples of the same size as ours from the population, calculating the proportion for each sample, and then calculating the standard deviation of the proportions obtained from these 10,000 different samples. This procedure will not work here, however, because unlike the previous example where we really did have data on the entire population of all flights from New York to Chicago, we do not have data on all 30,000+ lakes in Florida. We cannot take a lot of different samples of size 53 from the population of all lakes, and thus, cannot obtain the sampling distribution for the the proportion of lakes exceeding 1 ppm, or estimate the standard error of $\hat{p}$.

### Bootstrap Sampling

All we have is a single sample of 53 lakes. We need to figure out how much the proportion of lakes with mercury levels exceeding 1 ppm would vary between different samples of size 53, using only the information contained in our one sample.

To do this, we'll implement a popular simulation-based strategy, known as **bootstrapping**.

Let's assume our sample is representative of all Florida lakes. Then, we'll duplicate the sample many times to create a large set that will look like the population of all Florida Lakes. We can then draw samples of 53 from that large population, and record the mean mercury level for each sample of 53.

An illustration of the bootstrapping procedure is shown below, using a sample of 12 colored dots, instead of the 53 lakes.

```{r, echo=FALSE, out.width = '100%'}
knitr::include_graphics("Bootstrap_Idea.png")
```

In fact, duplicating the sample many times and selecting new samples of size $n$ has the same effect as drawing samples of size $n$ from the original sample, by putting the item drawn back in each time, a procedure called **sampling with replacement**. Thus, we can skip the step of copying/pasting the sample many times, and instead draw our samples with replacement.

This means that in each new sample, some lakes will be drawn multiple times and others not at all. It also ensures that each sample is different, allowing us to estimate variability in the sample mean between the different samples of size 53.

An illustration of the concept of bootstrapping, using sampling with replacement is shown below.

```{r, echo=FALSE, out.width = '100%'}
knitr::include_graphics("Bootstrap.png")
```

The variability in sample means in our newly drawn samples is used to approximate the variability in proportion $\hat{p}$ that would occur between different samples of 53 lakes, drawn from the population of all Florida Lakes.

The point of bootstrapping is to observe how much a statistic (in this case the proportion of lakes with Mercury levels exceeding 1 ppm) varies between bootstrap samples. This can act as an estimate of how much that statistic would vary between different samples of size $n$, drawn from the population.

The steps of bootstrap sampling can be summarized in the following algorithm.

**Bootstrap Algorithm**

For an original sample of size $n$:

1.  Take a sample size $n$ by randomly sampling from the original, with replacement. Thus, some observations will show up multiple times, and others not at all. This sample is called a **bootstrap sample**.

2.  Calculate the statistic of interest in the bootstrap sample (in this case $\hat{p}$, the proportion of lakes whose mercury levels exceed 1 ppm).

3.  Repeat steps 1 and 2 many (say 10,000) times, keeping track of the statistic of interest that is calculated in each bootstrap sample.

4.  Look at the distribution of the statistic across bootstrap samples. The variability in this bootstrap distribution can be used to approximate the variability in the sampling distribution for the statistic of interest.

### Bootstrap Samples of Lakes

The `sample_n()` function samples the specified number rows from a data frame, with or without replacement.

The lakes in the first sample are shown below. Notice that some lakes occur multiple times, and others not at all.

**Bootstrap Sample 1**

```{r}
BootstrapSample1 <- sample_n(FloridaLakes, 53, replace=TRUE) %>% arrange(Lake)
BootstrapSample1 %>% select(ID, Lake, Mercury) |> kable()
```

We calculate the proportion of lakes with mercury levels exceeding 1 ppm in this bootstrap sample. Note that if a lake shows up more than once in the bootstrap sample, then it is counted however many times it shows up.

```{r}
sum(BootstrapSample1$Mercury > 1) / 53
```

**Bootstrap Sample #2**

We take a second bootstrap sample. We display only the first 10 lakes, though the bootstrap sample still has 53 lakes.

Notice that the lakes chosen and omitted differ from the first sample.

```{r}
BootstrapSample2 <- sample_n(FloridaLakes, 53, replace=TRUE) %>% arrange(Lake)
BootstrapSample2 %>% select(ID, Lake, Mercury)
```

Proportion exceeding 1 ppm:

```{r}
sum(BootstrapSample2$Mercury > 1) / 53
```

**Bootstrap Sample #3**

We'll take one more bootstrap sample and calculate the proportion of lakes with mercury levels exceeding 1 ppm. The first 10 lakes in this third sample are shown.

```{r}
BootstrapSample3 <- sample_n(FloridaLakes, 53, replace=TRUE) %>% arrange(Lake)
BootstrapSample3 %>% select(ID, Lake, Mercury)
```

Proportion exceeding 1 ppm:

```{r}
sum(BootstrapSample3$Mercury > 1) / 53
```

### Bootstrap Distribution

Now that we have seen how bootstrap sampling works, we'll take a large number (10,000) different bootstrap samples and examine how the proportion of lakes with mercury levels exceeding 1 ppm varies between samples.

We'll use a `for-loop` to take many different bootstrap samples and record the observed proportion in a vector called `p_hat_b`

```{r}
p_hat <- sum(FloridaLakes$Mercury > 1)/53 #calculate sample statistic
Bootstrap_prop <- rep(NA, 10000)   #setup vector to hold bootstrap statistics

for (i in 1:10000){
BootstrapSample <- sample_n(FloridaLakes, 53, replace=TRUE) #take bootstrap sample
Bootstrap_prop[i] <- sum(BootstrapSample$Mercury > 1)/53 # calc. prop exceeding 1
}
Lakes_Bootstrap_Prop <- data.frame(Bootstrap_prop)  #store values in a dataframe
```

The distribution of proportions observed in the 10,000 different bootstrap samples is shown below. This distribution is called the **bootstrap distribution.**

```{r}
Lakes_Bootstrap_Prop_plot <- ggplot(data=Lakes_Bootstrap_Prop, aes(x=Bootstrap_prop)) +  
  geom_histogram(color="white", fill="lightblue", binwidth=0.02) +
  xlab("Prop > 1 in Bootstrap Sample ") + ylab("Frequency") +
  ggtitle("Bootstrap Distribution for Prop. of Lakes Exeeding 1 ppm Hg") + 
  theme(legend.position = "none")
Lakes_Bootstrap_Prop_plot
```

The bootstrap distribution is meant to approximate the sampling distribution of the statistic of interest (in this case the proportion exceeding 1 ppm). Because it is based on the sample, the bootstrap distribution will be centered at the sample statistic ($\hat{p}$ in this case) while the sampling distribution would have been centered at the population parameter ($p$), which is unknown. The important things, however, is that the variability in the bootstrap distribution gives a good approximation of the amount of variability in the sampling distribution, so we can use the standard deviation of the bootstrap distribution (called **bootstrap standard error**) in our confidence interval calculation.

### Bootstrap SE Confidence Interval

We calculate the standard deviation of this bootstrap distribution, which is an estimate of the standard error of $\hat{p}$. It measures how much the proportion of lakes exceeding 1 ppm varies between samples of size 53.

**Bootstrap Standard Error:**

```{r}
SE_p_hat <- sd(Lakes_Bootstrap_Prop$Bootstrap_prop)
```

Since the bootstrap distribution is roughly symmetric and bell-shaped, we can calculate a 95% confidence interval for the proportion of all Florida lakes with mercury levels exceeding 1 ppm, using bootstrap standard error confidence interval method.

$$
\hat{p} \pm 2\times\text{SE}(\hat{p})
$$

```{r}
c(p_hat - 2*SE_p_hat, p_hat + 2*SE_p_hat)
```

The gold bar at the bottom of the bootstrap distribution represents this 95% confidence interval.

```{r}
Lakes_Bootstrap_Prop_plot + 
  geom_segment(aes(x=p_hat - 2*SE_p_hat,xend=p_hat + 2*SE_p_hat, y=50, yend=50),
               color="gold", size=10, alpha=0.01) 
```

We are 95% confident that the proportion of all Florida lakes with mercury levels exceeding 1 ppm is between `r round(p_hat - 2*SE_p_hat, 4)` and `r round(p_hat + 2*SE_p_hat,4)`.

\newpage

## More Bootstrap Examples

### Bootstrapping Other Statistics

We've seen how to use bootstrapping to calculate confidence intervals for an unknown population parameter $p$, using an estimate $\hat{p}$, calculated from a sample of size $n$. This procedure can be applied to calculate confidence intervals for a wide range of population parameters, using statistics calculated from a sample.

For example, we could calculate confidence intervals any of the following parameters, using the corresponding sample statistic.

| Context                       | Parameter                                          | Statistic                              |
|--------------------------|-----------------------|-----------------------|
| Proportion                    | $p$                                                | $\hat{p}$                              |
| Mean                          | $\mu$                                              | $\bar{x}$                              |
| Standard Deviation            | $\sigma$                                           | $s$                                    |
| Median                        | no common abbreviations                            |                                        |
| Difference in Means           | $\mu_2-\mu_1$                                      | $\bar{x}_2 - \bar{x}_1$                |
| Regression Coefficient        | $\beta_j$                                          | $b_j$                                  |
| Estimated Regression Response | $\beta_0 + \beta_1x_{i1} + \ldots + \beta_px_{ip}$ | $b_0 + b_1x_{i1} + \ldots + b_px_{ip}$ |

We follow the same algorithm as we did when working with a proportion, and simply calculate whatever statistic we are interested in step 2, in place of $\hat{p}$, as we did previously.

The bootstrap algorithm is given again, below.

**Bootstrap Algorithm**

For an original sample of size $n$:

1.  Take a sample of size $n$ by randomly sampling from the original sample with replacement. (Thus some observations will show up multiple times and others not at all.)

2.  Calculate the statistic of interest in the bootstrap sample.

3.  Repeat steps 1 and 2 many (say 10,000) times, keeping track of the statistic of interest that is calculated in each bootstrap sample.

4.  Look at the distribution of the statistic across bootstrap samples. The variability in this bootstrap distribution can be used to approximate the variability in the sampling distribution for the statistic of interest.

We'll now go through examples, calculating bootstrap confidence intervals for each of the parameters listed above.

### CI for Mean

The histogram shows the distribution of mercury levels of the 53 lakes in our sample. The mean and standard deviation in mercury levels for these 53 lakes is shown.

```{r}
Lakes_Hist <- ggplot(data=FloridaLakes, aes(x=Mercury)) + 
  geom_histogram(color="white", fill="lightblue", binwidth = 0.2) + 
  ggtitle("Mercury Levels in Sample of Florida Lakes") + 
  xlab("Mercury Level") + ylab("Frequency") 
Lakes_Hist
```

We'll calculate the mean and median mercury level for the 53 lakes in the sample.

```{r}
Lakes_Stats <- FloridaLakes %>% summarize(MeanHg = mean(Mercury), 
                           StDevHG = sd(Mercury),
                           N=n())
kable(Lakes_Stats)
```

We want to calculate a 95% confidence interval for the mean mercury level among all Florida lakes. We'll use bootstrapping again, this time using the sample mean, rather than the proportion exceeding 1 ppm, as our statistic of interest.

**Bootstrap Steps**

1.  Take a sample of 53 lakes by randomly sampling from the original sample of 53 lakes, with replacement.

2.  Calculate the mean mercury level in the bootstrap sample.

3.  Repeat steps 1 and 2 many (say 10,000) times, keeping track of the mean mercury level in each bootstrap sample.

4.  Look at the distribution of the mean across bootstrap samples. The variability in this bootstrap distribution can be used to approximate the variability in the sampling distribution for the mean mercury level.

We'll illustrate the procedure on 3 bootstrap samples.

**Bootstrap Sample 1**

The first 10 lakes in the bootstrap sample are shown below. Notice again that some lakes occur multiple times, and others not at all.

```{r}
BootstrapSample1 <- sample_n(FloridaLakes, 53, replace=TRUE) %>% arrange(Lake)
BootstrapSample1 %>% select(ID, Lake, Mercury)
```

We calculate the mean mercury level among the lakes in the bootstrap sample.

```{r}
mean(BootstrapSample1$Mercury)
```

**Bootstrap Sample #2**

```{r}
BootstrapSample2 <- sample_n(FloridaLakes, 53, replace=TRUE) %>% arrange(Lake)
BootstrapSample2 %>% select(ID, Lake, Mercury)
```

Mean Mercury Level:

```{r}
mean(BootstrapSample2$Mercury)
```

**Bootstrap Sample #3**

```{r}
BootstrapSample3 <- sample_n(FloridaLakes, 53, replace=TRUE) %>% arrange(Lake)
BootstrapSample3 %>% select(ID, Lake, Mercury)
```

Mean Mercury Level:

```{r}
mean(BootstrapSample3$Mercury)
```

Now, we'll take 10,000 bootstrap samples, and record the mean mercury concentration in each sample.

```{r}
mean <- mean(FloridaLakes$Mercury)  #calculate sample statistic
Bootstrap_Mean <- rep(NA, 10000) # setup vector to hold bootstrap statistics

for (i in 1:10000){
BootstrapSample <- sample_n(FloridaLakes, 53, replace=TRUE) # take bootstrap sample
Bootstrap_Mean[i] <- mean(BootstrapSample$Mercury) # calculate mean in bootstrap sample
}
Lakes_Bootstrap_Results_Mean <- data.frame(Bootstrap_Mean)  #store results in data frame
```

The bootstrap distribution for the mean mercury level is shown below, along with its standard error.

```{r}
Lakes_Bootstrap_Mean_Plot <- ggplot(data=Lakes_Bootstrap_Results_Mean, 
                                    aes(x=Bootstrap_Mean)) +  
  geom_histogram(color="white", fill="lightblue") +
  xlab("Mean Mercury in Bootstrap Sample ") + ylab("Frequency") +
  ggtitle("Bootstrap Distribution for Sample Mean in Florida Lakes") + 
  theme(legend.position = "none") 
Lakes_Bootstrap_Mean_Plot 
```

**Bootstrap Standard Error**

We'll calculate the bootstrap standard error of the mean. This is a measure of how much the mean varies between samples of size 53.

```{r}
SE_mean <- sd(Lakes_Bootstrap_Results_Mean$Bootstrap_Mean)
SE_mean
```

Notice that the standard error of the mean is much less than the sample standard deviation of 0.341.

**Interpretations of sample standard deviation and standard error of the mean**

-   The sample standard deviation measures the amount of variability in mercury levels between the 53 individual lakes in our sample.

-   The standard error of the mean measures the amount of variability in sample mean mercury levels between different samples of size 53.

There is more variability between mercury levels in individual lakes than there is between average mercury levels in different samples of size 53.

Since the bootstrap distribution is roughly symmetric and bell-shaped, we can use the bootstrap standard error method to calculate an approximate 95% confidence interval for the mean mercury level among all Florida lakes.

$$
\text{Statistic} \pm 2\times\text{Standard Error}
$$

In this case, the statistic of interest is the sample mean $\bar{x}=0.527$. The confidence interval is

$$
\begin{aligned}
& \bar{x} \pm 2\times\text{SE}(\bar{x}) \\
& = 0.527 \pm 2\times\text{`r SE_mean`}
\end{aligned}
$$

95% Confidence Interval:

```{r}
c(mean - 2*SE_mean, mean + 2*SE_mean) 
```

The 95% confidence interval is shown by the gold bar on the graph of the bootstrap distribution below.

```{r}
Lakes_Bootstrap_Mean_Plot + 
  geom_segment(aes(x=mean - 2*SE_mean,xend=mean + 2*SE_mean, y=50, yend=50), 
               color="gold", size=10, alpha=0.01) 
```

We are 95% confident that the average mercury level among all Florida lakes is between `r round(mean - 2*SE_mean,2)` and `r round(mean + 2*SE_mean,2)` parts per million.

It is important to note that we are not saying that we are 95% confident that an individual lake lie in this range, or that 95% of all individual lakes lie in this range. We are only saying that we are confident that the *average* mercury level among all lakes lies in this range. A confidence interval is a statement about a population parameter (in this case the average mercury level), rather than about individual lakes in the population. Since there is more variability about individual lakes than overall averages, we'll need to make a wider interval when talking about the mercury level for an individual lake.

### CI for Standard Deviation

Now, we'll calculate a confidence interval for the standard deviation in mercury levels among all Florida lakes. Recall that the sample standard deviation ($s$) was:

```{r}
Sample_SD <- sd(FloridaLakes$Mercury)
Sample_SD
```

We'll use this estimate to calculate a confidence interval for the population standard deviation $\sigma$.

This time, our statistic of interest is the sample standard deviation $s$.

**Bootstrap Steps**

1.  Take a sample of 53 lakes by randomly sampling from the original sample of 53 lakes, with replacement.

2.  Calculate the standard deviation in mercury level in the bootstrap sample.

3.  Repeat steps 1 and 2 many (say 10,000) times, keeping track of the standard deviation mercury level in each bootstrap sample.

4.  Look at the distribution of the standard deviations across bootstrap samples. The variability in this bootstrap distribution can be used to approximate the variability in the sampling distribution for the standard deviation in mercury level.

We'll illustrate the procedure on 3 bootstrap samples.

**Bootstrap Sample 1**

```{r}
BootstrapSample1 <- sample_n(FloridaLakes, 53, replace=TRUE) %>% arrange(Lake)
BootstrapSample1 %>% select(ID, Lake, Mercury)
```

We calculate the standard deviation in mercury levels among the lakes in the bootstrap sample.

```{r}
sd(BootstrapSample1$Mercury)
```

**Bootstrap Sample #2**

```{r}
BootstrapSample2 <- sample_n(FloridaLakes, 53, replace=TRUE) %>% arrange(Lake)
BootstrapSample2 %>% select(ID, Lake, Mercury)
```

Standard Deviation in Mercury Level:

```{r}
sd(BootstrapSample2$Mercury)
```

**Bootstrap Sample #3**

```{r}
BootstrapSample3 <- sample_n(FloridaLakes, 53, replace=TRUE) %>% arrange(Lake)
BootstrapSample3 %>% select(ID, Lake, Mercury)
```

Standard Deviation Mercury Level:

```{r}
sd(BootstrapSample3$Mercury)
```

Now, we'll take 10,000 bootstrap samples, and record the standard deviation in mercury concentration in each sample.

```{r}
Sample_SD <- sd(FloridaLakes$Mercury)  #calculate sample statistic
Bootstrap_SD <- rep(NA, 10000) # setup vector to hold bootstrap statistics

for (i in 1:10000){
BootstrapSample <- sample_n(FloridaLakes, 53, replace=TRUE) # take bootstrap sample
Bootstrap_SD[i] <- sd(BootstrapSample$Mercury) # calculate standard deviation in bootstrap sample
}
Lakes_Bootstrap_Results_SD <- data.frame(Bootstrap_SD)  #store results in data frame
```

The bootstrap distribution for the mean mercury level is shown below, along with its standard error.

```{r}
Lakes_Bootstrap_SD_Plot <- ggplot(data=Lakes_Bootstrap_Results_SD, 
                                    aes(x=Bootstrap_SD)) +  
  geom_histogram(color="white", fill="lightblue") +
  xlab("SD in Mercury in Bootstrap Sample ") + ylab("Frequency") +
  ggtitle("Bootstrap Distribution for Sample SD in Florida Lakes") + 
  theme(legend.position = "none") 
Lakes_Bootstrap_SD_Plot 
```

**Bootstrap Standard Error:**

We'll calculate the bootstrap standard error of the standard deviation. This is a measure of how much the standard deviation varies between samples.

```{r}
SE_SD <- sd(Lakes_Bootstrap_Results_SD$Bootstrap_SD)
SE_SD
```

Since the bootstrap distribution is roughly symmetric and bell-shaped, we can use the bootstrap standard error method to calculate an approximate 95% confidence interval for the standard deviation in mercury levels among all Florida lakes.

$$
\text{Statistic} \pm 2\times\text{Standard Error}
$$

In this case, the statistic of interest is the sample standard deviation $s=0.341$. The confidence interval is

$$
\begin{aligned}
& s \pm 2\times\text{SE}(s) \\
& = 0.341 \pm 2\times{0.029}
\end{aligned}
$$

95% Confidence Interval:

```{r}
c(Sample_SD - 2*SE_SD, Sample_SD + 2*SE_SD        ) 
```

The 95% confidence interval is shown by the gold bar on the graph of the bootstrap distribution below.

```{r}
Lakes_Bootstrap_SD_Plot + 
  geom_segment(aes(x=Sample_SD - 2*SE_SD,xend=Sample_SD + 2*SE_SD, y=50, yend=50), 
               color="gold", size=10, alpha=0.01) 
```

We are 95% confident that the standard deviation in mercury levels among all Florida lakes is between `r round(Sample_SD - 2*SE_SD,2)` and `r round(Sample_SD + 2*SE_SD,2)` parts per million.

### CI for Median

We already calculated a confidence interval for the mean mercury level among all Florida lakes. We could calculate a bootstrap confidence interval for the median mercury level as well, but since the distribution of mercury levels in the lakes is roughly symmetric, the mean is a reasonable measure of center, and there is not a clear reason for using the median instead.

When a distribution is skewed or contains large outliers, however, the median is a more robust measure of center than the mean. Recall the distribution of 100 Seattle house prices seen in Chapters 1 and 2.

```{r}
ggplot(data=Houses, aes(x=price)) + 
  geom_histogram(fill="lightblue", color="white") + 
  ggtitle("Distribution of House Prices") +
  xlab("Price") + 
  ylab("Frequency")
```

These 100 houses are a sample of all houses sold in Seattle in 2014 and 2015, so we can use statistics from our sample to draw conclusions about all houses sold in Seattle in this time period.

In this subsection, we'll use bootstrapping to calculate a 95% confidence interval for the median price among all houses sold in Seattle in this time period.

We calculate the sample median price.

```{r}
Sample_Median <- median(Houses$price)
Sample_Median
```

**Bootstrap Steps**

1.  Take a sample of 100 houses by randomly sampling from the original sample of 100 houses, with replacement.

2.  Calculate the median price in the bootstrap sample.

3.  Repeat steps 1 and 2 many (say 10,000) times, keeping track of the median price in each bootstrap sample.

4.  Look at the distribution of the median price across bootstrap samples. The variability in this bootstrap distribution can be used to approximate the variability in the sampling distribution for the median price.

We'll illustrate the procedure on 3 bootstrap samples.

**Bootstrap Sample 1**

```{r}
BootstrapSample1 <- sample_n(Houses, 100, replace=TRUE) %>% arrange(Id)
BootstrapSample1 %>% select(Id, price)
```

We calculate the median price among the houses in the bootstrap sample.

```{r}
median(BootstrapSample1$price)
```

**Bootstrap Sample #2**

```{r}
BootstrapSample2 <- sample_n(Houses, 100, replace=TRUE) %>% arrange(Id)
BootstrapSample2 %>% select(Id, price)
```

Median Price:

```{r}
median(BootstrapSample2$price)
```

**Bootstrap Sample #3**

```{r}
BootstrapSample3 <- sample_n(Houses, 100, replace=TRUE) %>% arrange(Id)
BootstrapSample3 %>% select(Id, price)
```

Median Price:

```{r}
median(BootstrapSample3$price)
```

Now, we'll take 10,000 bootstrap samples, and record the median price in each sample.

```{r}
Sample_Med <- median(Houses$price)  #calculate sample median
Bootstrap_Med <- rep(NA, 10000) # setup vector to hold bootstrap statistics

for (i in 1:10000){
BootstrapSample <- sample_n(Houses, 100, replace=TRUE) # take bootstrap sample
Bootstrap_Med[i] <- median(BootstrapSample$price) # calculate standard deviation in bootstrap sample
}
Houses_Bootstrap_Results_Med <- data.frame(Bootstrap_Med)  #store results in data frame
```

The bootstrap distribution for the median price is shown below, along with its standard error.

```{r}
Houses_Bootstrap_Med_Plot <- ggplot(data=Houses_Bootstrap_Results_Med, 
                                    aes(x=Bootstrap_Med)) +  
  geom_histogram(color="white", fill="lightblue") +
  xlab("Median Price in Bootstrap Sample ") + ylab("Frequency") +
  ggtitle("Bootstrap Distribution for Median Price in Seattle Houses") + 
  theme(legend.position = "none") 
Houses_Bootstrap_Med_Plot 
```

**Bootstrap Standard Error:**

We'll calculate the bootstrap standard error of the median. This is a measure of how much the median varies between samples.

```{r}
SE_Med <- sd(Houses_Bootstrap_Results_Med$Bootstrap_Med)
SE_Med
```

The standard error measures the amount of variability in median house price between different samples of size 100.

Note that this is different than the sample standard deviation, which represents the standard deviation in prices between the 100 different houses in the sample.

Notice that the bootstrap distribution for the median is not symmetric and bell-shaped. Thus, we cannot be assured that 95% of samples will produce a statistic within two standard errors of the mean, so the standard error confidence interval method is not appropriate here. Instead, we'll calculate a confidence interval by taking the middle 95% of the values in the bootstrap distribution. A confidence interval calculated this way is called a **percentile bootstrap interval**.

We'll calculate the 0.025 quantile and the 0.975 quantile of this bootstrap distribution. These are the points below which lie 2.5% and 97.5% of the medians in the bootstrap distribution. Thus, the middle 95% of the medians lie between these values.

```{r}
q.025 <- quantile(Houses_Bootstrap_Results_Med$Bootstrap_Med, 0.025)
q.025
```

```{r}
q.975 <- quantile(Houses_Bootstrap_Results_Med$Bootstrap_Med, 0.975)
q.975 
```

The 95% confidence interval is shown by the gold bar on the graph of the bootstrap distribution below.

```{r}
Houses_Bootstrap_Med_Plot + 
  geom_segment(aes(x=q.025,xend=q.975, y=50, yend=50), 
               color="gold", size=10, alpha=0.01) 
```

We are 95% confident that the median price among all houses that sold in Seattle between 2014 and 2015 is between `r round(q.025,1)` and `r round(q.975,1)` thousand dollars.

### CI for Difference in Means

We previously calculated a confidence interval for the average mercury level among all lakes in Florida.

Now, we'll calculate an interval for the difference in average mercury levels between lakes in Northern Florida, compared to Southern Florida.

```{r, include=FALSE }
#Location relative to rt. 50
FloridaLakes$Location <- as.factor(c("S","S","N","S","S","N","N","N","N","N","N","S","N","S","N","N","N","N","S","S","N","S","N","S","N","S","N","S","N","N","N","N","N","N","S","N","N","S","S","N","N","N","N","S","N","S","S","S","S","N","N","N","N"))
head(FloridaLakes %>% select(Lake, Mercury, Location))
```

The boxplot shows and table below describe the distribution of mercury levels for lakes in Northern Florida, compared to Southern Florida.

```{r}
LakesBP <- ggplot(data=FloridaLakes, aes(x=Location, y=Mercury, fill=Location)) + 
  geom_boxplot() +   geom_jitter() + ggtitle("Mercury Levels in Florida Lakes") + 
  xlab("Location") + ylab("Mercury Level") + theme(axis.text.x = element_text(angle = 90)) + coord_flip()
LakesBP
```

```{r}
LakesTable <- FloridaLakes %>% group_by(Location) %>% summarize(MeanHg=mean(Mercury), 
                                                  StDevHg=sd(Mercury), 
                                                  N=n())
LakesTable
```

In our sample of 33 Northern Lakes and 20 Southern Lakes, we saw a difference of 0.27 ppm. We'll calculate a confidence interval to estimate how big or small this difference could be among all Florida lakes.

We'll use a statistical model to calculate the average mercury levels in Northern and Southern Florida.

$\widehat{\text{Mercury}} = b_0 +b_1\times{\text{South}}$

-   $b_0$ represents the mean mercury level for lakes in North Florida, and\
-   $b_1$ represents the mean difference in mercury level for lakes in South Florida, compared to North Florida

The estimates for corresponding to the original sample are shown below.

```{r}
M <- lm(data=FloridaLakes, Mercury~Location)
M
```

Thus, we can obtain a confidence interval for the difference in average mercury levels by fitting a regression model to each of our bootstrap samples and recording the value of the sample statistic $b_1$, which represents this difference. Alternatively, we could calculate the mean from each group separately and subtract.

When comparing groups, we make one modification in Step #1 of the bootstrap process. Rather than drawing a sample of size $n$ at random, with replacement, we'll draw the same number of observations from each group as were in the original sample. In this case, we had 33 northern lakes, and 20 southern lakes.

**Bootstrap Steps**

1.  Take a sample of 33 northern lakes and 20 southern lakes by randomly sampling from the original sample, with replacement.

2.  Fit a regression model with location as the explanatory variable and record the value of $b_1$, representing the difference between the means for each group (South-North).

3.  Repeat steps 1 and 2 many (say 10,000) times, keeping track of the difference in means in each bootstrap sample.

4.  Look at the distribution of the differences in means across bootstrap samples. The variability in this bootstrap distribution can be used to approximate the variability in the sampling distribution for the difference in means between mercury levels in Northern and Southern Florida.

We'll illustrate the procedure on 3 bootstrap samples.

**Bootstrap Sample 1**

```{r}
NLakes <- sample_n(FloridaLakes %>% filter(Location=="N"), 33, replace=TRUE)   ## sample 33 northern lakes
SLakes <- sample_n(FloridaLakes %>% filter(Location=="S"), 20, replace=TRUE)   ## sample 20 southern lakes
BootstrapSample1 <- rbind(NLakes, SLakes) %>% arrange(ID) %>% 
  select(ID, Lake, Location, Mercury)   ## combine Northern and Southern Lakes
BootstrapSample1
```

We fit a regression model to the bootstrap sample and calculate the regression coefficients. We're interested in the second coefficient, $b_1$, which represents the mean difference between lakes in Southern and Northern Florida

```{r}
Mb1 <- lm(data=BootstrapSample1, Mercury ~ Location) ## fit linear model
Mb1
```

```{r}
NLakes <- sample_n(FloridaLakes %>% filter(Location=="N"), 33, replace=TRUE)   ## sample 33 northern lakes
SLakes <- sample_n(FloridaLakes %>% filter(Location=="S"), 20, replace=TRUE)   ## sample 20 southern lakes
BootstrapSample2 <- rbind(NLakes, SLakes) %>% arrange(ID) %>% 
  select(ID, Lake, Location, Mercury)   ## combine Northern and Southern Lakes
BootstrapSample2
```

**Bootstrap Sample 2**

```{r}
Mb2 <- lm(data=BootstrapSample2, Mercury ~ Location) ## fit linear model
Mb2
```

**Bootstrap Sample 3**

```{r}
NLakes <- sample_n(FloridaLakes %>% filter(Location=="N"), 33, replace=TRUE)   ## sample 33 northern lakes
SLakes <- sample_n(FloridaLakes %>% filter(Location=="S"), 20, replace=TRUE)   ## sample 20 southern lakes
BootstrapSample3 <- rbind(NLakes, SLakes) %>% arrange(ID) %>% 
  select(ID, Lake, Location, Mercury)   ## combine Northern and Southern Lakes
BootstrapSample3
```

```{r}
Mb3 <- lm(data=BootstrapSample3, Mercury ~ Location) ## fit linear model
Mb3
```

We'll now take 10,000 different bootstrap samples and look at the bootstrap distribution for $b_1$, the difference in mean mercury levels between lakes in Southern and Northern Florida

```{r}
M <- lm(data=FloridaLakes, Mercury~Location) #fit model to original sample
Sample_b1 <- M$coefficients[2] # record b1 value (second coefficient)
Bootstrap_b1 <- rep(NA, 10000)  #vector to store b1 values

for (i in 1:10000){
NLakes <- sample_n(FloridaLakes %>% filter(Location=="N"), 33, replace=TRUE)   ## sample 33 northern lakes
SLakes <- sample_n(FloridaLakes %>% filter(Location=="S"), 20, replace=TRUE)   ## sample 20 southern lakes
BootstrapSample <- rbind(NLakes, SLakes)   ## combine Northern and Southern Lakes
M <- lm(data=BootstrapSample, Mercury ~ Location) ## fit linear model
Bootstrap_b1[i] <- M$coefficients[2] ## record b1 
}
NS_Lakes_Bootstrap_Results <- data.frame(Bootstrap_b1)  #save results as dataframe
```

The bootstrap distribution for the difference in means, $b_1$, is shown below, along with the standard error for the difference.

```{r}
NS_Lakes_Bootstrap_Plot_b1 <- ggplot(data=NS_Lakes_Bootstrap_Results, aes(x=Bootstrap_b1)) +  
  geom_histogram(color="white", fill="lightblue") + 
  xlab("Mean Difference (b1) in Bootstrap Sample") + ylab("Frequency") +
  ggtitle("Northern vs Southern Lakes: Bootstrap Distribution for b1") 
NS_Lakes_Bootstrap_Plot_b1
```

**Bootstrap Standard Error:**

We'll calculate the bootstrap standard error of the difference in means $b_1$. This is a measure of how much the difference in means varies between samples.

```{r}
SE_b1 <- sd(NS_Lakes_Bootstrap_Results$Bootstrap_b1)
SE_b1
```

The bootstrap distribution is symmetric and bell-shaped, so we can use the standard error method to calculate a 95% confidence interval.

$$
\begin{aligned}
& b_1 \pm 2\times\text{SE}(b_1) \\
& = 0.271 \pm 2\times{0.095}
\end{aligned}
$$

95% Confidence Interval:

```{r}
c(Sample_b1 - 2*SE_b1, Sample_b1 + 2*SE_b1) 
```

The 95% confidence interval is shown by the gold bar on the graph of the bootstrap distribution below.

```{r}
NS_Lakes_Bootstrap_Plot_b1 + 
  geom_segment(aes(x=Sample_b1 - 2*SE_b1,xend=Sample_b1 + 2*SE_b1, y=50, yend=50), 
               color="gold", size=10, alpha=0.01) 
```

We are 95% confident that the mean mercury level among all lakes in Southern Florida is between `r round(Sample_b1 - 2*SE_b1,2)` and `r round(Sample_b1 + 2*SE_b1,2)` higher than the mean mercury level among all lakes in Northern Florida.

### CI for Regression Slope

Now, we'll examine the relationship between mercury concentration and pH in Florida lakes. The scatterplot displays these variables, along with the least squares regression line.

```{r}
ggplot(data=FloridaLakes, aes(y=Mercury, x=pH)) + 
  geom_point() + stat_smooth(method="lm", se=FALSE)
```

The regression equation is

$$
\widehat{\text{Mercury}} = b_0 + b_1\times\text{pH}
$$

Regression estimates $b_0$ and $b_1$ are shown below.

```{r}
M <- lm(data=FloridaLakes, Mercury~pH)
M
```

-   On average, lakes with pH level 0 are expected to have a mercury level of 1.53 ppm.\
-   For each one-unit increase in pH, mercury level is expected to decrease by 0.15 ppm.

These estimates are sample statistics, calculated from our sample of 53 lakes. We can think of our regression equation estimates $b_0$ and $b_1$ as estimates of parameters $\beta_0$ and $\beta_1$, which pertain to the slope and intercept of the regression line pertaining to the entire population of all lakes in Florida. We'll use $b_0$ and $b_1$ to estimate $\beta_0$ and $\beta_1$ in the same way that we used sample proportion $\hat{p}$ to estimate population proportion $p$ and sample mean $\bar{x}$ to estimate population mean $\mu$.

The intercept, $\beta_0$ has little meaning here, but the slope $\beta_1$ represents the average change in mercury level for each one-unit increase in pH, among all Florida lakes. We'll use bootstrapping to find a confidence interval for this quantity.

**Bootstrap Steps**

1.  Take a sample of 53 lakes by randomly sampling from the original sample, with replacement.

2.  Fit a regression model with pH as the explanatory variable and record the value of slope $b_1$.

3.  Repeat steps 1 and 2 many (say 10,000) times, keeping track of slope of the regression line for each bootstrap sample.

4.  Look at the distribution of the slopes across bootstrap samples. The variability in this bootstrap distribution can be used to approximate the variability in the sampling distribution for the slope relating mercury and pH levels.

We'll illustrate the procedure on 3 bootstrap samples.

**Bootstrap Sample 1**

```{r}
BootstrapSample1 <- sample_n(FloridaLakes , 53, replace=TRUE)  %>% arrange(ID) %>% 
  select(ID, Lake, pH, Mercury)   # take bootstrap sample
BootstrapSample1
```

We fit a regression model to the bootstrap sample and calculate the regression coefficients. We're again interested in the second coefficient, $b_1$, which now represents the slope of the regression line.

```{r}
Mb1 <- lm(data=BootstrapSample1, Mercury ~ pH) # fit linear model
Mb1
```

**Bootstrap Sample 2**

```{r}
BootstrapSample2 <- sample_n(FloridaLakes , 53, replace=TRUE)  %>% arrange(ID) %>% 
  select(ID, Lake, pH, Mercury)
BootstrapSample2
```

```{r}
Mb2 <- lm(data=BootstrapSample2, Mercury ~ pH) # fit linear model
Mb2
```

**Bootstrap Sample 3**

```{r}
BootstrapSample3 <- sample_n(FloridaLakes , 53, replace=TRUE)  %>% arrange(ID) %>% 
  select(ID, Lake, pH, Mercury)
BootstrapSample3
```

```{r}
Mb3 <- lm(data=BootstrapSample3, Mercury ~ pH) # fit linear model
Mb3
```

We'll now take 10,000 different bootstrap samples and look at the bootstrap distribution for $b_1$, the slope of the regression line relating mercury level and pH.

```{r}
M <- lm(data=FloridaLakes, Mercury~pH) #fit model to original sample
Sample_b1 <- M$coefficients[2] # record b1 value (second coefficient)
Bootstrap_b1 <- rep(NA, 10000)  #vector to store b1 values

for (i in 1:10000){
BootstrapSample <- sample_n(FloridaLakes , 53, replace=TRUE)   #take bootstrap sample
M <- lm(data=BootstrapSample, Mercury ~ pH) # fit linear model
Bootstrap_b1[i] <- M$coefficients[2] # record b1 
}
Lakes_Bootstrap_Slope_Results <- data.frame(Bootstrap_b1)  #save results as dataframe
```

The bootstrap distribution for the slopes, $b_1$, is shown below, along with the standard error for the difference.

```{r}
Lakes_Bootstrap_Plot_Slope <- ggplot(data=Lakes_Bootstrap_Slope_Results, aes(x=Bootstrap_b1)) +
  geom_histogram(color="white", fill="lightblue") + 
  xlab("Slope in Bootstrap Sample") + ylab("Frequency") +
  ggtitle("Bootstrap Distribution for Slope") 
Lakes_Bootstrap_Plot_Slope
```

**Bootstrap Standard Error:**

We'll calculate the bootstrap standard error of the slope $b_1$. This is a measure of how much the slope varies between samples.

```{r}
SE_b1 <- sd(Lakes_Bootstrap_Slope_Results$Bootstrap_b1)
SE_b1
```

The bootstrap distribution is symmetric and bell-shaped, so we can use the standard error method to calculate a 95% confidence interval.

$$
\begin{aligned}
& b_1 \pm 2\times\text{SE}(b_1) \\
& = -0.1523 \pm 2\times{0.027}
\end{aligned}
$$

95% Confidence Interval:

```{r}
c(Sample_b1 - 2*SE_b1, Sample_b1 + 2*SE_b1) 
```

The 95% confidence interval is shown by the gold bar on the graph of the bootstrap distribution below.

```{r}
Lakes_Bootstrap_Plot_Slope + 
  geom_segment(aes(x=Sample_b1 - 2*SE_b1,xend=Sample_b1 + 2*SE_b1, y=50, yend=50), 
               color="gold", size=10, alpha=0.01) 
```

We are 95% confident that among all Florida lakes, for each 1 unit increase in pH, mercury level decreases between `r round(-1*(Sample_b1 - 2*SE_b1), 1)` and `r round(-1*(Sample_b1 + 2*SE_b1),1)`, on average.

### CI for Regression Response

In addition to calculating a confidence interval for the slope of the regression line relating mercury and pH levels in a lake, we can also calculate a confidence interval for the average mercury level among all lakes with a given pH.

We'll calculate a confidence interval for the average mercury level among all lakes with a neutral pH level of 7.

The regression equation is

$$
\begin{aligned}
\widehat{\text{Mercury}} & = b_0 + b_1\times\text{pH} \\
& = 1.5309 - 0.1523\times\text{pH}
\end{aligned}
$$

so the expected mercury level among all lakes with $\text{pH} = 7$ is $b_0+7b_1 = 1.5309-0.1523(7)=0.4648$ ppm.

This quantity is a statistic calculated from a sample of 53 lakes, so we would not expect the average mercury level among all lakes in the population to be exactly equal to 0.4648. Again, we'll use this sample statistic as an estimate of the population parameter, and use bootstrapping to estimate the variability associated with this statistic, in order to make a confidence interval.

**Bootstrap Steps**

1.  Take a sample of 53 lakes by randomly sampling from the original sample, with replacement.

2.  Fit a regression model with location as the explanatory variable and record the values of $b_0$ and $b_1$. Use these to calculate $b_0+7b_1$.

3.  Repeat steps 1 and 2 many (say 10,000) times, keeping track of $b_0$ and $b_1$, and calculating $b_0+7b_1$ in each bootstrap sample.

4.  Look at the distribution of the expected response, $b_0 + 7b_1$, across bootstrap samples. The variability in this bootstrap distribution can be used to approximate the variability in the sampling distribution for the expected mercury level among all lakes with pH level of 7.

We'll illustrate the procedure on 3 bootstrap samples.

**Bootstrap Sample 1**

```{r}
BootstrapSample1 <- sample_n(FloridaLakes , 53, replace=TRUE)  %>% arrange(ID) %>% 
  select(ID, Lake, pH, Mercury)   # take bootstrap sample
BootstrapSample1
```

We fit a regression model to the bootstrap sample and calculate the regression coefficients. We're interested in the second coefficient, $b_1$, which represents the mean difference between lakes in Southern and Northern Florida

```{r}
Mb1 <- lm(data=BootstrapSample1, Mercury ~ pH) ## fit linear model
b0 <- Mb1$coefficients[1] # record value of b0 (first coefficient)
b1 <- Mb1$coefficients[2] # record value of b1 (second coefficient)
b0+7*b1 #calculate b0+7*b1
```

**Bootstrap Sample 2**

```{r}
BootstrapSample2 <- sample_n(FloridaLakes , 53, replace=TRUE)  %>% arrange(ID) %>% 
  select(ID, Lake, pH, Mercury)
BootstrapSample2
```

```{r}
Mb2 <- lm(data=BootstrapSample2, Mercury ~ pH) # fit linear model
b0 <- Mb2$coefficients[1] # record value of b0 (first coefficient)
b1 <- Mb2$coefficients[2] # record value of b1 (second coefficient)
b0+7*b1 #calculate b0+7*b1
```

**Bootstrap Sample 3**

```{r}
BootstrapSample3 <- sample_n(FloridaLakes , 53, replace=TRUE)  %>% arrange(ID) %>% 
  select(ID, Lake, pH, Mercury)
BootstrapSample3
```

```{r}
Mb3 <- lm(data=BootstrapSample3, Mercury ~ pH) # fit linear model
b0 <- Mb3$coefficients[1] # record value of b0 (first coefficient)
b1 <- Mb3$coefficients[2] # record value of b1 (second coefficient)
b0+7*b1 #calculate b0+7*b1
```

We'll now take 10,000 different bootstrap samples and record the values of $b_0$, $b_1$, which we'll then use to calculate $b_0+7b_1$.

```{r}
M <- lm(data=FloridaLakes, Mercury~pH) #fit model to original sample
Sample_b0 <- M$coefficients[1] # record b0 value (second coefficient)
Sample_b1 <- M$coefficients[2] # record b1 value (second coefficient)
Sample_Exp7 <- Sample_b0 + 7*Sample_b1 # calculate sample expected mercury when pH=7
Bootstrap_b0 <- rep(NA, 10000)  #vector to store b1 values
Bootstrap_b1 <- rep(NA, 10000)  #vector to store b1 values

for (i in 1:10000){
BootstrapSample <- sample_n(FloridaLakes , 53, replace=TRUE)   #take bootstrap sample
M <- lm(data=BootstrapSample, Mercury ~ pH) # fit linear model
Bootstrap_b0[i] <- M$coefficients[1] # record b0 
Bootstrap_b1[i] <- M$coefficients[2] # record b1 
}

Bootstrap_Exp7 <-  Bootstrap_b0 + 7*Bootstrap_b1 # calcualte expected response for each bootstrap sample

Lakes_Bootstrap_Exp7_Results <- data.frame(Bootstrap_b0, Bootstrap_b1, Bootstrap_Exp7)  #save results as dataframe
```

The bootstrap distribution for the expected mercury level among all lakes with pH level 7, $b_0+7b_1$, is shown below, along with the standard error for this quantity.

```{r}
Lakes_Bootstrap_Plot_Exp7 <- ggplot(data=Lakes_Bootstrap_Exp7_Results, aes(x=Bootstrap_Exp7)) +  
  geom_histogram(color="white", fill="lightblue") + 
  xlab("Expected Mercury Level in Bootstrap Sample") + ylab("Frequency") +
  ggtitle( "Bootstrap Distribution for Exp. Mercury when pH=7") 
Lakes_Bootstrap_Plot_Exp7
```

**Bootstrap Standard Error:**

We'll calculate the bootstrap standard error of expected mercury concentration $b_0 + 7b_1$. This is a measure of how much the estimated expected concentration varies between samples.

```{r}
SE_Exp7 <- sd(Lakes_Bootstrap_Exp7_Results$Bootstrap_Exp7)
SE_Exp7
```

Again, the bootstrap distribution is symmetric and bell-shaped, so we can use the standard error method to calculate a 95% confidence interval.

$$
\begin{aligned}
& b_1 \pm 2\times\text{SE}(b_1) \\
& = 0.4648 \pm 2\times{0.037}
\end{aligned}
$$

95% Confidence Interval:

```{r}
c(Sample_Exp7 - 2*SE_Exp7, Sample_Exp7 + 2*SE_Exp7) 
```

The 95% confidence interval is shown by the gold bar on the graph of the bootstrap distribution below.

```{r}
Lakes_Bootstrap_Plot_Exp7 + 
  geom_segment(aes(x=Sample_Exp7 - 2*SE_Exp7,xend=Sample_Exp7 + 2*SE_Exp7, y=50, yend=50), 
               color="gold", size=10, alpha=0.01) 
```

We are 95% confident that average mercury level among all Florida lakes with pH level 7 is between `r round(Sample_Exp7 - 2*SE_Exp7,1)` and `r round(Sample_Exp7 + 2*SE_Exp7,1)` ppm.

Again, we are not saying that we think an individual like with a pH level of 7 will lie in this range, only that the average mercury level among all such lakes lies in this range.

### More CI's in Regression

We saw in the previous two examples how to calculate a confidence interval for the slope of a regression line, and for an expected response in regression. In fact, we can calculate confidence intervals for any function involving regression coefficients $\beta_0, \beta_1, \ldots, \beta_p$, in a similar manner.

For example, let's consider the model for Seattle house prices that involved square feet, whether or not the house was on the waterfront, and an interaction term between these variables.

The model is

$$
\widehat{Price} = b_0 + b_1\times\text{Sq. Ft.} + b_2\times\text{waterfront} + b_3\times\text{Sq.Ft}\times\text{Waterfront}
$$

We fit the model and obtain the parameter estimates shown below.

```{r}
M <- lm(data=Houses, price~sqft_living + waterfront +
          sqft_living:waterfront) #fit model to original sample
Sample_b0 <- M$coefficients[1] # record b0 value (second coefficient)
Sample_b1 <- M$coefficients[2] # record b1 value (second coefficient)
Sample_b2 <- M$coefficients[3] # record b1 value (second coefficient)
Sample_b3 <- M$coefficients[4] # record b1 value (second coefficient)
M
```

Consider the following quantities that we might be interested in estimating:

1.  The expected price of a 2,000 square foot waterfront house.\
2.  The expected price of a 1,500 square foot non-waterfront house.\
3.  The difference between the expected price of a house 1,800 square foot house on the waterfront, compared to a house the same size that is not on the waterfront.\
4.  The difference in the rate of change in house prices for each additional 100 square feet for houses on the waterfront, compared to houses not on the waterfront.

Each of these quantities can be expressed as a linear function of our regression coefficients $b_0, b_1, b_2, b_3$. We just need to find the appropriate function of the $b_j$'s, and then calculate a bootstrap confidence interval for that quantity, using the same steps we've seen in the previous examples.

Substituting into the regression equation, we see that:

1.  The expected price of a 2,000 square foot waterfront house is given by $$b_0 + 2000b_1 + b_2 + 2000b_3$$

We calculate this estimate from the model, based on our sample of 100 houses:

```{r}
2000*Sample_b1 +Sample_b2+2000*Sample_b3 # calculate b0+2000b1+b2+2000b3
```

We estimate that the average price of all 2,000 square foot waterfront houses in Seattle is 937 thousand dollars.

2.  The expected price of a 1,500 square foot non-waterfront house is given by $$b_0 + 1500b_1$$

```{r}
Sample_b0 + 1500*Sample_b1 # calculate b0+1500b1+
```

We estimate that the average price of all 1,500 square foot non-waterfront houses in Seattle is 395 thousand dollars.

3.  The difference between the expected price of a house 1,800 square foot house on the waterfront, compared to a house the same size that is not on the waterfront is given by:

$$
\begin{aligned}
& (b_0 + 1800b_1 + b_2 + 1800b_3) - (b_0 + 1800b_1) \\
& = b_2 +1800b_3
\end{aligned}
$$

```{r}
Sample_b2+1800*Sample_b3 # calculate b2+1800b3
```

We estimate that on average a 1,800 square foot house on the waterfront will cost 414 thousand dollars more than a 1,800 square foot house not on the waterfront.

4.  The difference in the rate of change in house prices for each additional 100 square feet for houses on the waterfront, compared to houses not on the waterfront.

This question is asking about the difference in slopes of the regression lines relating price and square feet for houses on the waterfront, compared to those not on the waterfront.

For houses on the waterfront, the regression equation is

$$ \widehat{Price} = (b_0 + b_2) + (b_1 +b_3)\times\text{Sq. Ft.}, $$

so the slope is $b_1 + b_3$.

For houses not on the waterfront, the regression equation is

$$ \widehat{Price} = b_0 + b_1 \times\text{Sq. Ft.}, $$

so the slope is $b_1$.

These slope pertain to the expected change in price for each additional 1 square foot. So, for a 100-square foot increase, the price of a waterfront house is expected to increase by $100(b_1+b_3)$, compared to an increase of $100b_1$ for a non-waterfront house. Thus, the difference in the rates of change is $100b_3$.

```{r}
100*Sample_b3 # calculate 100b3
```

We estimate that the price of waterfront houses increases by 43 thousand dollars more for each additional 100 square feet than the price of non-waterfront houses.

These estimates calculated from the sample are statistics, which, like all the other statistics we've seen are likely to vary from the true values of the corresponding population parameters, due to variability between samples. We can use bootstrapping to calculate confidence intervals for the relevant population parameters, using these sample statistics (the functions of $b_j$'s), just as we've done for the other statistics we've seen.

**Bootstrap Steps**

1.  Take a sample of 100 houses by randomly sampling from the original sample, with replacement.

2.  Fit a regression model with location as the explanatory variable and record the values of regression coefficients $b_0, b_1, b_2, b_3$. Use these to calculate each of the four desired quantities (i.e. $b_0 + 2000b_1 + b_2 +2000b_3$)

3.  Repeat steps 1 and 2 many (say 10,000) times, keeping track of the regression coefficients and calculating the desired quantities in each bootstrap sample.

4.  Look at the distribution of the quantities of interest, across bootstrap samples. The variability in this bootstrap distribution can be used to approximate the variability in the sampling distribution for each of these quantities.

We'll illustrate the procedure on 3 bootstrap samples.

**Bootstrap Sample 1**

We take the first bootstrap sample and fit a model with interaction. For brevity, we won't list out the houses in each of the bootstrap samples, as the idea should be clear by now. Model coefficients are shown below.

```{r}
BootstrapSample1 <- sample_n(Houses , 100, replace=TRUE)  %>% arrange(Id) %>% 
  select(Id, price, sqft_living, waterfront)   

Mb1 <- lm(data=BootstrapSample1, price ~ sqft_living + waterfront + sqft_living:waterfront) # fit linear model with interaction
b0 <- Mb1$coefficients[1] # record value of b0 (first coefficient)
b1 <- Mb1$coefficients[2] # record value of b1 (second coefficient)
b2 <- Mb1$coefficients[3] # record value of b2 (third coefficient)
b3 <- Mb1$coefficients[4] # record value of b3 (fourth coefficient)
Mb1
```

We calculate each of the four desired quantities.

```{r}
b0+2000*b1 + b2 + 2000*b3
```

```{r}
b0+1500*b1
```

```{r}
b2+1800*b3
```

```{r}
100*b3
```

**Bootstrap Sample 2**

```{r}
BootstrapSample2 <- sample_n(Houses , 100, replace=TRUE)  %>% arrange(Id) %>% 
  select(Id, price, sqft_living, waterfront)   

Mb2 <- lm(data=BootstrapSample2, price ~ sqft_living + waterfront + sqft_living:waterfront) # fit linear model with interaction
b0 <- Mb2$coefficients[1] # record value of b0 (first coefficient)
b1 <- Mb2$coefficients[2] # record value of b1 (second coefficient)
b2 <- Mb2$coefficients[3] # record value of b2 (third coefficient)
b3 <- Mb2$coefficients[4] # record value of b3 (fourth coefficient)
Mb2
```

We calculate each of the four desired quantities.

```{r}
b0+2000*b1 + b2 + 2000*b3
```

```{r}
b0+1500*b1
```

```{r}
b2+1800*b3
```

```{r}
100*b3
```

**Bootstrap Sample 3**

```{r}
BootstrapSample3 <- sample_n(Houses , 100, replace=TRUE)  %>% arrange(Id) %>% 
  select(Id, price, sqft_living, waterfront)   

Mb3 <- lm(data=BootstrapSample3, price ~ sqft_living + waterfront + sqft_living:waterfront) # fit linear model with interaction
b0 <- Mb3$coefficients[1] # record value of b0 (first coefficient)
b1 <- Mb3$coefficients[2] # record value of b1 (second coefficient)
b2 <- Mb3$coefficients[3] # record value of b2 (third coefficient)
b3 <- Mb3$coefficients[4] # record value of b3 (fourth coefficient)
Mb3
```

We calculate each of the four desired quantities.

```{r}
b0+2000*b1 + b2 + 2000*b3
```

```{r}
b0+1500*b1
```

```{r}
b2+1800*b3
```

```{r}
100*b3
```

We'll now take 10,000 different bootstrap samples and record the values of $b_0$, $b_1$, $b_3$, and $b_4$, which we'll then use to calculate each of our four desired quantities.

```{r}
M <- lm(data=Houses, price~sqft_living + waterfront +
          sqft_living:waterfront) #fit model to original sample
Sample_b0 <- M$coefficients[1] # record b0 value (second coefficient)
Sample_b1 <- M$coefficients[2] # record b1 value (second coefficient)
Sample_b2 <- M$coefficients[3] # record b1 value (second coefficient)
Sample_b3 <- M$coefficients[4] # record b1 value (second coefficient)
Sample_Q1 <- Sample_b0 + 2000*Sample_b1 +Sample_b2+2000*Sample_b3 # calculate b0+2000b1+b2+2000b3
Sample_Q2 <- Sample_b0 + 1500*Sample_b1 # calculate b0+1500b1+
Sample_Q3 <- Sample_b2+1800*Sample_b3 # calculate b2+1800b3
Sample_Q4 <- 100*Sample_b3 # calculate 100b3

Bootstrap_b0 <- rep(NA, 10000)  #vector to store b0 values
Bootstrap_b1 <- rep(NA, 10000)  #vector to store b1 values
Bootstrap_b2 <- rep(NA, 10000)  #vector to store b2 values
Bootstrap_b3 <- rep(NA, 10000)  #vector to store b3 values


for (i in 1:10000){
BootstrapSample <- sample_n(Houses, 1000, replace=TRUE)   #take bootstrap sample
Mb <- lm(data=BootstrapSample, price ~ sqft_living + 
           waterfront + sqft_living:waterfront) # fit linear model with interaction
Bootstrap_b0[i] <- Mb$coefficients[1] # record value of b0 (first coefficient)
Bootstrap_b1[i] <- Mb$coefficients[2] # record value of b1 (second coefficient)
Bootstrap_b2[i] <- Mb$coefficients[3] # record value of b2 (third coefficient)
Bootstrap_b3[i] <- Mb$coefficients[4] # record value of b3 (fourth coefficient)
}

Bootstrap_Q1 <-  Bootstrap_b0 + 2000*Bootstrap_b1 + Bootstrap_b2 + 2000*Bootstrap_b3
Bootstrap_Q2 <-  Bootstrap_b0 + 1500*Bootstrap_b1 
Bootstrap_Q3 <-  Bootstrap_b2 + 1800*Bootstrap_b3
Bootstrap_Q4 <-  100*Bootstrap_b3

Houses_Bootstrap_Results <- data.frame(Bootstrap_b0, Bootstrap_b1, Bootstrap_b2, Bootstrap_b3, Bootstrap_Q1, Bootstrap_Q2 , Bootstrap_Q3 , Bootstrap_Q4)  #save results as dataframe
```

**Bootstrap Distribution for** $b_0 + 2000b_1 + b_2 + 2000b_3$

```{r}
Houses_Bootstrap_Plot_Q1 <- ggplot(data=Houses_Bootstrap_Results, 
                                   aes(x=Bootstrap_Q1)) +  
  geom_histogram(color="white", fill="lightblue") + 
  xlab("Expected Price of 2000 Sq. Ft. Waterfront House") + ylab("Frequency") +
  ggtitle( "Bootstrap Distribution b0+2000b1+b2+2000b3") 
Houses_Bootstrap_Plot_Q1
```

Standard Error:

```{r}
SE_Q1 <- sd(Houses_Bootstrap_Results$Bootstrap_Q1)
SE_Q1
```

The bootstrap distribution is symmetric and bell-shaped, so we can use the standard error method to calculate a 95% confidence interval.

95% Confidence Interval:

```{r}
c(Sample_Q1 - 2*SE_Q1, Sample_Q1 + 2*SE_Q1) 
```

The 95% confidence interval is shown by the gold bar on the graph of the bootstrap distribution below.

```{r}
Houses_Bootstrap_Plot_Q1 + 
  geom_segment(aes(x=Sample_Q1 - 2*SE_Q1,xend=Sample_Q1 + 2*SE_Q1, y=50, yend=50), 
               color="gold", size=10, alpha=0.01) 
```

We are 95% confident that average price among all 2,000 square foot Seattle waterfront houses is between `r Sample_Q1 - 2*SE_Q1` and `r Sample_Q1 + 2*SE_Q1` thousand dollars.

**Bootstrap Distribution for** $b_0 + 1500b_1$

```{r}
Houses_Bootstrap_Plot_Q2 <- ggplot(data=Houses_Bootstrap_Results, 
                                   aes(x=Bootstrap_Q2)) +  
  geom_histogram(color="white", fill="lightblue") + 
  xlab("Expected Price of 1500 Sq. Ft. Non-Waterfront House") + ylab("Frequency") +
  ggtitle( "Bootstrap Distribution b0+1500b1") 
Houses_Bootstrap_Plot_Q2
```

Standard Error:

```{r}
SE_Q2 <- sd(Houses_Bootstrap_Results$Bootstrap_Q2)
SE_Q2
```

The bootstrap distribution is symmetric and bell-shaped, so we can use the standard error method to calculate a 95% confidence interval.

95% Confidence Interval:

```{r}
c(Sample_Q2 - 2*SE_Q2, Sample_Q2 + 2*SE_Q2) 
```

The 95% confidence interval is shown by the gold bar on the graph of the bootstrap distribution below.

```{r}
Houses_Bootstrap_Plot_Q2 + 
  geom_segment(aes(x=Sample_Q2 - 2*SE_Q2,xend=Sample_Q2 + 2*SE_Q2, y=50, yend=50), 
               color="gold", size=10, alpha=0.01) 
```

We are 95% confident that average price among all 1,500 square foot Seattle non-waterfront houses is between `r Sample_Q2 - 2*SE_Q2` and `r Sample_Q2 + 2*SE_Q2` thousand dollars.

**Bootstrap Distribution for** $b_2 + 1800b_3$

```{r}
Houses_Bootstrap_Plot_Q3 <- ggplot(data=Houses_Bootstrap_Results, 
                                   aes(x=Bootstrap_Q3)) +  
  geom_histogram(color="white", fill="lightblue") + 
  xlab("Expected Price Difference WF vs NWF for 1800 sq. Ft. House") + ylab("Frequency") +
  ggtitle( "Bootstrap Distribution b2+1800b3") 
Houses_Bootstrap_Plot_Q3
```

Standard Error:

```{r}
SE_Q3 <- sd(Houses_Bootstrap_Results$Bootstrap_Q3)
SE_Q3
```

The bootstrap distribution is symmetric and bell-shaped, so we can use the standard error method to calculate a 95% confidence interval.

95% Confidence Interval:

```{r}
c(Sample_Q3 - 2*SE_Q3, Sample_Q3 + 2*SE_Q3) 
```

The 95% confidence interval is shown by the gold bar on the graph of the bootstrap distribution below.

```{r}
Houses_Bootstrap_Plot_Q3 + 
  geom_segment(aes(x=Sample_Q3 - 2*SE_Q3,xend=Sample_Q3 + 2*SE_Q3, y=50, yend=50), 
               color="gold", size=10, alpha=0.01) 
```

We are 95% confident that the average price among all 1800 square feet waterfront houses in Seattle is between `r Sample_Q3 - 2*SE_Q3` and `r Sample_Q3 + 2*SE_Q3` thousand dollars more than the average price among all non-waterfront houses of the same size.

**Bootstrap Distribution for** $100b_3$

```{r}
Houses_Bootstrap_Plot_Q4 <- ggplot(data=Houses_Bootstrap_Results, 
                                   aes(x=Bootstrap_Q4)) +  
  geom_histogram(color="white", fill="lightblue") + 
  xlab("Expected Difference per 100 square feet") + ylab("Frequency") +
  ggtitle( "Bootstrap Distribution 100b3") 
Houses_Bootstrap_Plot_Q4
```

**Bootstrap Standard Error:** We'll calculate the bootstrap standard error of the slope $100b_3$. This is a measure of how much the slope varies between samples.

```{r}
SE_Q4 <- sd(Houses_Bootstrap_Results$Bootstrap_Q4)
SE_Q4
```

The bootstrap distribution is symmetric and bell-shaped, so we can use the standard error method to calculate a 95% confidence interval.

95% Confidence Interval:

```{r}
c(Sample_Q4 - 2*SE_Q4, Sample_Q4 + 2*SE_Q4) 
```

The 95% confidence interval is shown by the gold bar on the graph of the bootstrap distribution below.

```{r}
Houses_Bootstrap_Plot_Q4 + 
  geom_segment(aes(x=Sample_Q4 - 2*SE_Q4,xend=Sample_Q4 + 2*SE_Q4, y=50, yend=50), 
               color="gold", size=10, alpha=0.01) 
```

We are 95% confident that for each 100 square foot increase, the average price among all waterfront houses increases by between `r Sample_Q4 - 2*SE_Q4` and `r Sample_Q4 + 2*SE_Q4` thousand dollars more than the increase in average price among all non-waterfront.

### Bootstrapping Cautions

While bootstrapping is a popular and robust procedure for calculating confidence intervals, it does have cautions and limitations. We should be sure to use the bootstrap procedure appropriate for our context. A standard-error bootstrap interval is appropriate when the sampling distribution for our statistic is roughly symmetric and bell-shaped. When this is not true, a percentile bootstrap interval can be used as long as there are no gaps or breaks in the bootstrap distribution. In situations where there are gaps and breaks in the bootstrap distribution, then the bootstrap distribution may not be a reasonable approximation of the sampling distribution we are interested in.

\newpage

## Hypothesis Testing

### Mercury Levels in Florida Lakes

Recall the 2004 study by Lange, T., Royals, H. and Connor, L., which examined Mercury accumulation in large-mouth bass, taken from a sample of 53 Florida Lakes. If Mercury accumulation exceeds 0.5 ppm, then there are environmental concerns. In fact, the legal safety limit in Canada is 0.5 ppm, although it is 1 ppm in the United States.

In our sample, we have data on 53 lakes, out of more than 30,000 lakes in the the state of Florida.

We are interested in whether mercury levels are higher or lower, on average, in Northern Florida compared to Southern Florida.

We'll divide the state along route 50, which runs East-West, passing through Northern Orlando.

```{r, echo=FALSE, out.width = '30%', fig.cap="from Google Maps"}
knitr::include_graphics("Florida.png")
```

We add a variable indicating whether each lake lies in the northern or southern part of the state.

```{r}
library(Lock5Data)
data(FloridaLakes)
#Location relative to rt. 50
FloridaLakes$Location <- as.factor(c("S","S","N","S","S","N","N","N","N","N","N","S","N","S","N","N","N","N","S","S","N","S","N","S","N","S","N","S","N","N","N","N","N","N","S","N","N","S","S","N","N","N","N","S","N","S","S","S","S","N","N","N","N"))
FloridaLakes <- FloridaLakes %>% rename(Mercury = AvgMercury)
print.data.frame(data.frame(FloridaLakes%>% select(Lake, Location, Mercury)), row.names = FALSE)
```

We are interested in investigating whether average mercury levels are higher in either Northern Florida or Southern Florida than the other.

The boxplot and table below show the distribution of mercury levels among the 33 northern and 20 southern lakes in the sample.

```{r}
LakesBP <- ggplot(data=FloridaLakes, aes(x=Location, y=Mercury, fill=Location)) + 
  geom_boxplot() +   geom_jitter() + ggtitle("Mercury Levels in Florida Lakes") + 
  xlab("Location") + ylab("Mercury Level") + theme(axis.text.x = element_text(angle = 90)) + ylim(c(0, 1.5)) + coord_flip() 
LakesBP
```

```{r}
LakesTable <- FloridaLakes %>% group_by(Location) %>% summarize(MeanHg=mean(Mercury), StDevHg=sd(Mercury),  N=n())
kable(LakesTable)
```

We see that on average mercury levels were higher among the southern lakes than the northern ones, a difference of $0.697-0.445= 0.272$ ppm.

### Model for Mercury Level

We can use a statistical model to estimate a lake's mercury level, using its location (N or S) as our explanatory variable.

The model equation is

$\widehat{\text{Hg}} = b_0 +b_1\times\text{South}$

-   $b_0$ represents the mean mercury level for lakes in North Florida, and\
-   $b_1$ represents the mean difference in mercury level for lakes in South Florida, compared to North Florida

Fitting the model in R, we obtain the estimates for $b_0$ and $b_1$.

```{r}
Lakes_M <- lm(data=FloridaLakes, Mercury ~ Location)
Lakes_M
```

$$
\widehat{\text{Hg}} = `r Lakes_M$coef[1]`+`r Lakes_M$coef[2]`\times\text{South}
$$

-   $b_1 = 0.272= 0.6965 - 0.4245$ is equal to the difference in mean mercury levels between Northern and Southern lakes. (We've already seen that for categorical variables, the least-squares estimate is the mean, so this makes sense.)

-   We can use $b_1$ to assess the size of the difference in mean mercury concentration levels.

### Hypotheses and Key Question

Since the lakes we observed are only a sample of 53 lakes out of more than 30,000, we cannot assume the difference in mercury concentration for **all** Northern vs Southern Florida lakes is exactly 0.272. Instead, we need to determine whether a difference of this size in our sample is large enough to provide evidence of a difference in average mercury level between **all** Northern and Southern lakes in Florida.

One possible explanation for us getting the results we did in our sample is that there really is no difference in average mercury levels between all lakes in Northern and Southern Florida, and we just happened, by chance, to select more lakes with higher mercury concentrations in Southern Florida than in Northern Florida. A different possible explanation is that there really is a difference in average mercury level between lakes in Northern and Southern Florida.

In a statistical investigation, the **null hypothesis** is the one that says there is no difference between groups , or no relationship between variables in the larger population, and that any difference/relationship observed in our sample occurred merely by chance. The **alternative hypothesis** contradicts the null hypothesis, stating that there is a difference/relationship.

Stated formally, the hypotheses are:

**Null Hypothesis:** There is no difference in average mercury level between all lakes in Northern Florida and all lakes in Southern Florida.

**Alternative Hypothesis:** There is a difference in average mercury level between all lakes in Northern Florida and all lakes in Southern Florida.

A statistician's job is to determine whether the data provide strong enough evidence to rule out the null hypothesis.

The question we need to investigate is:

*"How likely is it that we would have observed a difference in means (i.e. a value of* $b_1$) as extreme as 0.6965-0.4245 = 0.272 ppm, merely by chance, if there is really no relationship between location and mercury level?"

### Permutation Test for Difference in Means

We can answer the key question using a procedure known as a **permutation test**. In a permutation test, we randomly permute (or shuffle) the values of our explanatory variable to simulate a situation where there is no relationship between our explanatory and response variable. We observe whether it is plausible to observe values of a statistic (in this case the difference in means) as extreme or more extreme than what we saw in the actual data.

We'll simulate situations where there is no relationship between location and mercury level, and see how often we observe a difference in means ($b_1$) as extreme as 0.272.

**Procedure:**

1.  Randomly shuffle the locations of the lakes, so that any relationship between location and mercury level is due only to chance.

2.  Calculate the difference in mean mercury levels (i.e. value of $b_1$) in "Northern" and "Southern" lakes, using the shuffled data. The statistic used to measure the size of the difference or relationship in the sample is called the **test statistic.**

3.  Repeat steps 1 and 2 many (say 10,000) times, recording the test statistic (difference in means, $b_1$) each time.

4.  Analyze the distribution of the test statistic (mean difference), simulated under the assumption that there is no relationship between location and mercury level. Look whether the value of the test statistic we observed in the sample (0.272) is consistent with values simulated under the assumption that the null hypothesis is true.

This simulation can be performed using this [Rossman-Chance App](http://www.rossmanchance.com/applets/2021/anovashuffle/AnovaShuffle.htm?hideExtras=2).

### Five Permutations in R

We'll use R to perform permutation test.

**First Permutation**

Recall these groups were randomly assigned, so the only differences in averages are due to random chance.

```{r}
ShuffledLakes <- FloridaLakes    # create copy of dataset
ShuffledLakes$Location <- ShuffledLakes$Location[sample(1:nrow(ShuffledLakes))] 
```

```{r}
Shuffle1df <- data.frame(FloridaLakes$Lake, FloridaLakes$Location, 
                         FloridaLakes$Mercury, ShuffledLakes$Location)
names(Shuffle1df) <- c("Lake", "Location", "Mercury", "Shuffled Location")
kable(head(Shuffle1df))
```

Notice that the locations of the lakes have now been mixed up and assigned randomly. So, any relationship between location and mercury level will have occurred merely by chance.

We create a boxplot and calculate the difference in mean mercury levels for the shuffled data.

```{r}
LakesPerm <- ggplot(data=Shuffle1df, aes(x=`Shuffled Location`, 
                                         y=Mercury, fill=`Shuffled Location`)) + 
  geom_boxplot() +   geom_jitter() + ggtitle("Mercury Levels in Florida Lakes") + 
  xlab("Location") + ylab("Mercury Level") + theme(axis.text.x = element_text(angle = 90)) + ylim(c(0, 1.5)) + coord_flip()
LakesPerm
```

```{r}
LakesPermTable <- Shuffle1df %>% group_by(`Shuffled Location`) %>% summarize(MeanHg=mean(Mercury), StDevHg=sd(Mercury),  N=n())
kable(LakesPermTable)
```

Notice that the sample means are not identical. We observe a difference of `r LakesPermTable[1,2] - LakesPermTable[2,2]` just by chance associated with the assignment of the lakes to their random location groups.

This difference is considerably smaller than the difference of 0.272 that we saw in the actual data, suggesting that perhaps a difference as big as 0.272 would not be likely to occur by chance. Before we can be sure of this, however, we should repeat our simulation many times to get a better sense for how big of a difference we might reasonable expect to occur just by chance.

**Second Permutation**

```{r}
ShuffledLakes <- FloridaLakes    ## create copy of dataset
ShuffledLakes$Location <- ShuffledLakes$Location[sample(1:nrow(ShuffledLakes))] 
kable(head(Shuffle1df))
```

```{r}
Shuffle1df <- data.frame(FloridaLakes$Lake, FloridaLakes$Location, FloridaLakes$Mercury, ShuffledLakes$Location)
names(Shuffle1df) <- c("Lake", "Location", "Mercury", "Shuffled Location")
```

```{r}
LakesPerm <- ggplot(data=Shuffle1df, aes(x=`Shuffled Location`, y=Mercury, fill=`Shuffled Location`)) + 
  geom_boxplot() +   geom_jitter() + ggtitle("Mercury Levels in Florida Lakes") + 
  xlab("Location") + ylab("Mercury Level") + theme(axis.text.x = element_text(angle = 90)) + ylim(c(0, 1.5)) + coord_flip()
LakesPerm
```

```{r}
LakesPermTable <- Shuffle1df %>% group_by(`Shuffled Location`) %>% summarize(MeanHg=mean(Mercury), StDevHg=sd(Mercury),  N=n())
kable(LakesPermTable)
```

**Third Permutation**

```{r}
ShuffledLakes <- FloridaLakes    ## create copy of dataset
ShuffledLakes$Location <- ShuffledLakes$Location[sample(1:nrow(ShuffledLakes))] 
kable(head(Shuffle1df))
```

```{r}
Shuffle1df <- data.frame(FloridaLakes$Lake, FloridaLakes$Location, FloridaLakes$Mercury, ShuffledLakes$Location)
names(Shuffle1df) <- c("Lake", "Location", "Mercury", "Shuffled Location")
```

```{r}
LakesPerm <- ggplot(data=Shuffle1df, aes(x=`Shuffled Location`, y=Mercury, fill=`Shuffled Location`)) + 
  geom_boxplot() +   geom_jitter() + ggtitle("Mercury Levels in Florida Lakes") + 
  xlab("Location") + ylab("Mercury Level") + theme(axis.text.x = element_text(angle = 90)) + ylim(c(0, 1.5)) + coord_flip()
LakesPerm
```

```{r}
LakesPermTable <- Shuffle1df %>% group_by(`Shuffled Location`) %>% summarize(MeanHg=mean(Mercury), StDevHg=sd(Mercury),  N=n())
kable(LakesPermTable)
```

**Fourth Permutation**

```{r}
ShuffledLakes <- FloridaLakes    ## create copy of dataset
ShuffledLakes$Location <- ShuffledLakes$Location[sample(1:nrow(ShuffledLakes))] 
kable(head(Shuffle1df))
```

```{r}
Shuffle1df <- data.frame(FloridaLakes$Lake, FloridaLakes$Location, FloridaLakes$Mercury, ShuffledLakes$Location)
names(Shuffle1df) <- c("Lake", "Location", "Mercury", "Shuffled Location")
```

```{r}
LakesPerm <- ggplot(data=Shuffle1df, aes(x=`Shuffled Location`, y=Mercury, fill=`Shuffled Location`)) + 
  geom_boxplot() +   geom_jitter() + ggtitle("Mercury Levels in Florida Lakes") + 
  xlab("Location") + ylab("Mercury Level") + theme(axis.text.x = element_text(angle = 90)) + ylim(c(0, 1.5)) + coord_flip()
LakesPerm
```

```{r}
LakesPermTable <- Shuffle1df %>% group_by(`Shuffled Location`) %>% summarize(MeanHg=mean(Mercury), StDevHg=sd(Mercury),  N=n())
kable(LakesPermTable)
```

**Fifth Permutation**

```{r}
ShuffledLakes <- FloridaLakes    ## create copy of dataset
ShuffledLakes$Location <- ShuffledLakes$Location[sample(1:nrow(ShuffledLakes))] 
kable(head(Shuffle1df))
```

```{r}
Shuffle1df <- data.frame(FloridaLakes$Lake, FloridaLakes$Location, FloridaLakes$Mercury, ShuffledLakes$Location)
names(Shuffle1df) <- c("Lake", "Location", "Mercury", "Shuffled Location")
```

```{r}
LakesPerm <- ggplot(data=Shuffle1df, aes(x=`Shuffled Location`, y=Mercury, fill=`Shuffled Location`)) + 
  geom_boxplot() +   geom_jitter() + ggtitle("Mercury Levels in Florida Lakes") + 
  xlab("Location") + ylab("Mercury Level") + theme(axis.text.x = element_text(angle = 90)) + ylim(c(0, 1.5)) + coord_flip()
LakesPerm
```

```{r}
LakesPermTable <- Shuffle1df %>% group_by(`Shuffled Location`) %>% summarize(MeanHg=mean(Mercury), StDevHg=sd(Mercury),  N=n())
kable(LakesPermTable)
```

### R Code for Permutation Test

We'll write a `for` loop to perform 10,000 permutations and record the value of $b_1$ (the difference in sample means) for each simulation.

```{r}
b1 <- Lakes_M$coef[2] ## record value of b1 from actual data

## perform simulation
b1Sim <- rep(NA, 10000)          ## vector to hold results
ShuffledLakes <- FloridaLakes    ## create copy of dataset
for (i in 1:10000){
  #randomly shuffle locations
ShuffledLakes$Location <- ShuffledLakes$Location[sample(1:nrow(ShuffledLakes))] 
ShuffledLakes_M<- lm(data=ShuffledLakes, Mercury ~ Location)   #fit model to shuffled data
b1Sim[i] <- ShuffledLakes_M$coef[2]  ## record b1 from shuffled model
}
NSLakes_SimulationResults <- data.frame(b1Sim)  #save results in dataframe
```

The histogram shows the distribution of differences in the group means observed in our simulation. The red lines indicate the difference we actually observed in the data (0.272), as well as an equally large difference in the opposite direction (-0.272).

```{r}
NSLakes_SimulationResultsPlot <- ggplot(data=NSLakes_SimulationResults, 
                                        aes(x=b1Sim)) + 
  geom_histogram(fill="lightblue", color="white") + 
  geom_vline(xintercept=c(b1, -1*b1), color="red") + 
  xlab("Lakes: Simulated Value of b1") + ylab("Frequency") + 
  ggtitle("Distribution of b1 under assumption of no relationship")
NSLakes_SimulationResultsPlot
```

The red lines are quite extreme, relative to the simulated values shown in the histogram. Based on the simulation, it is rare to obtain a difference as extreme as the 0.272 value we saw in the actual data, by chance when there is actually no difference in average mercury levels between Northern and Southern Florida lakes.

We calculate the precise number of simulations (out of 10,000) resulting in difference in means more extreme than 0.27195.

```{r}
sum(abs(b1Sim) > abs(b1))
```

The proportion of simulations resulting in difference in means more extreme than 0.272 is:

```{r}
sum(abs(b1Sim) > abs(b1))/10000
```

We only observed a difference between the groups as extreme or more extreme than the 0.272 difference we saw in the sample in a proportion of `r sum(abs(b1Sim) > abs(b1))/10000` of our simulations (less than 1%).

The probability of getting a difference in means as extreme or more extreme than 0.272 ppm by chance, when there is no relationship between location and mercury level is about `r sum(abs(b1Sim) > abs(b1))/10000`. In other words, it is very unlikely that we would have observed a result like we did by chance alone. Thus, we have strong evidence that there is a difference in average mercury level between lakes in Northern and Southern Florida. In this case, there is strong evidence that mercury level is higher in Southern Florida lakes than Northern Florida lakes.

Recall that in the previous chapter, we found that we could be 95% confident that the mean mercury level among all lakes in Southern Florida is between 0.08 and 0.46 higher than the mean mercury level among all lakes in Northern Florida.

### p-values

The **p-value** represents the probability of getting a test statistic as extreme or more extreme than we did in our sample when the null hypothesis is true.

In this situation, the p-value represents the probability of observing a difference in sample means as extreme or more extreme than 0.272 if there is actually no difference in average mercury level among all lakes in Northern Florida, compared to Southern Florida.

In our study, the p-value was `r sum(abs(b1Sim) > abs(b1))/10000`, which is very low. This provides strong evidence against the null hypothesis that there is no difference in average mercury levels between all Northern and Southern Florida lakes.

A low p-value tells us that the difference in average Mercury levels that we saw in our sample is unlikely to have occurred by chance, providing evidence that there is indeed a difference in average Mercury levels between Northern and Southern lakes.

The p-value does not tell us anything about the size of the difference! If the difference is really small (say 0.001 ppm), perhaps there is no need to worry about it. It is possible to get a small p-value even when the true difference is very small (especially when our sample size is large). In addition to a p-value, we should consider whether a difference is big enough to be meaningful in a practical way, before making any policy decisions.

For now, we can use the difference in sample means of 0.272 ppm as an estimate of the size of the difference. Based on our limited knowledge of mercury levels, this does seem big enough to merit further investigation, and possible action.

At this point, a reasonable question is "how small must a p-value be in order to provide evidence against the null hypothesis?" While it is sometimes common to establish strict cutoffs for what counts as a small p-value (such as $<0.05$), the American Statistical Association does not recommend this. In reality, a p-value of 0.04 is practically no different than a p-value of 0.06. Rather than using strict cutoffs for what counts as small, it is better to interpreting p-values on a sliding scale, as illustrated in the diagram below. A p-value of 0.10 or less provides at least some evidence against a null hypothesis, and the smaller the p-value is, the stronger the evidence gets.

```{r, out.width = '100%'}
knitr::include_graphics("pvals.png")
```

\newpage

## More Hypothesis Test Examples

### Other Test Statistics

The permutation test procedure can be used to test hypotheses involving lots of different test statistics, in addition to testing for a difference in means, as we saw seen in the previous section. For example we could test whether there is evidence of:

1.  a difference in the median mercury level between lakes in Northern Florida, compared to southern Florida

2.  a difference in the amount of variability in mercury levels between lakes in Northern Florida, compared to southern Florida\

3.  a difference in the proportion of lakes whose mercury level exceeds 1 ppm between lakes in Northern Florida, compared to southern Florida\

4.  a difference in mean price between King County houses in very good, good, and average or below conditions

5.  a relationship between mercury level and pH level among all Florida lakes

For each of these investigations, the null hypothesis will be that there is no difference or relationship among all lakes (that is, whatever difference or relationship occurred in the sample occurred just by random chance). We'll need to find a test statistic that measures the quantity we're interested in (for example, difference in means). Then, we use the permutation procedure to simulate a scenario where our null hypothesis is true, and see if test statistic we saw in our data is consistent with the ones we simulate under the null hypothesis.

### General Permutation Test Procedure

**Procedure:**

1.  Randomly shuffle the values or categories of the explanatory variable, so that any relationship between the explanatory and response variable occurs just by chance.

2.  Calculate the test statistic on the shuffled data.

3.  Repeat steps 1 and 2 many (say 10,000) times, recording the test statistic each time.

4.  Analyze the distribution of the test statistic, simulated under the assumption that the null hypothesis is true. Look whether the value of the test statistic we observed in the sample is consistent with values simulated under the assumption that the null hypothesis is true. (We might calculate a p-value, which represents the proportion of simulations in which we observed a test statistic as extreme or more extreme than the one we saw in our actual sample.)

Next, we'll apply these steps to questions 2, 4, and 5 from the previous subsection.

### Difference in Standard Deviation

We'll test whether there is evidence of a difference in variability between lakes in Northern Florida, compared to Southern Florida. Since standard deviation is a measure of variability, we'll use the difference in standard deviation in Northern vs Southern lakes as our test statistic.

Recall that the standard deviation among the 53 Northern Florida Lakes in our sample was 0.270 ppm, which is lower than the 0.384 ppm in Southern Florida.

```{r}
kable(LakesTable)
```

The test statistic we observe in our sample is $0.2696-0.3839 = -0.1142$ ppm.

We need to determine whether a difference this large could have plausibly occurred in our sample, just by chance, if there is really no difference in standard deviation among all lakes in Northern Florida, compared to Southern Florida.

**Null Hypothesis:** There is no difference in standard deviation of mercury levels between all lakes in Northern Florida and all lakes in Southern Florida.

**Alternative Hypothesis:** There is a difference in standard deviation of mercury levels between all lakes in Northern Florida and all lakes in Southern Florida.

We'll apply the general hypothesis testing procedure, using standard deviation as our test statistic.

**Procedure:**

1.  Randomly shuffle the locations of the lakes, so that any relationship between the location and mercury level occurs just by chance.

2.  Calculate the difference in standard deviation between lakes in the two samples of the shuffled data.

3.  Repeat steps 1 and 2 many (say 10,000) times, recording the difference in standard deviations each time.

4.  Analyze the distribution of difference in standard deviations, simulated under the assumption that there is no difference in standard deviations between North and South. Look whether the value of the test statistic we observed in the sample is consistent with values simulated under the assumption that there is no difference in standard deviations.

**R Code for Permutation Test**

We'll write a `for` loop to perform 10,000 permutations and record the value of $b_1$ (the difference in sample means) for each simulation.

```{r}
SDTab <- FloridaLakes %>% group_by(Location) %>% summarize(SD=sd(Mercury))
DiffSD <- SDTab$SD[2] - SDTab$SD[1] 

## perform simulation
DiffSim <- rep(NA, 10000)          ## vector to hold results
ShuffledLakes <- FloridaLakes    ## create copy of dataset
for (i in 1:10000){
  #randomly shuffle locations
ShuffledLakes$Location <- ShuffledLakes$Location[sample(1:nrow(ShuffledLakes))] 
SDTabSim <- ShuffledLakes %>% group_by(Location) %>% summarize(SD=sd(Mercury))
DiffSim[i] <- SDTabSim$SD[2] - SDTabSim$SD[1] #record difference in SD for simulated data
}
NSLakes_SDSimResults <- data.frame(DiffSim)  #save results in dataframe
```

The distribution of the simulated differences in standard deviation is shown below. Recall that these were simulated assuming that the null hypothesis, that there is no difference in standard deviation of mercury levels among all lakes in Northern Florida, compared to Southern Florida is true.

The red lines represent differences as extreme as -0.1142 that we saw in our sample.

```{r}
NSLakes_SDSimResultsPlot <- ggplot(data=NSLakes_SDSimResults, aes(x=DiffSim)) + 
  geom_histogram(fill="lightblue", color="white") + 
  geom_vline(xintercept=c(DiffSD, -1*DiffSD), color="red") + 
  xlab("Simulated Difference in SD's") + ylab("Frequency") + 
  ggtitle("Distribution of Difference in SD under assumption of no relationship")
NSLakes_SDSimResultsPlot
```

We calculate the number of simulations (out of 10,000) resulting in standard deviations greater the 0.1142.

```{r}
sum(abs(DiffSim) > abs(DiffSD))
```

**p-value:** Proportion of simulations (out of 10,000) resulting in difference in standard deviations greater the 0.1142.

```{r}
mean(abs(DiffSim) > abs(DiffSD))
```

This p-value represents the probability of observing a difference in sample standard deviations as extreme as 0.1142 in a samples of size 33 and 20 by chance, if in fact, the standard deviation in mercury concentration levels is the same for lakes in Northern Florida as in Southern Florida.

Since the p-value is small, it is unlikely that we would observe a difference in standard deviations as extreme as 0.1142 by chance. There is evidence that lakes in Southern Florida exhibit more variability in mercury levels than lakes in Northern Florida (though the evidence is not as strong as it was when we were testing for a difference in means).

Note that we have avoided the fallacy of using 0.05 as a strict cutoff for rejecting the null hypothesis.

Although the difference in standard deviations is statistically discernible, it is hard to say whether it is practically meaningful. Without knowing a lot about mercury levels, and their impact on the ecosystem, it's harder to tell whether an estimated difference in standard deviations of 0.11 ppm is meaningful or not. It would be good to consult a biologist before making any decisions based on these results.

### Slope of Regression Line

In addition to the mercury levels of the Florida lakes, we have data on the pH level of each lake. pH level measures the acidity of a lake, ranging from 0 to 14, with 7 being neutral, and lower levels indicating more acidity. We plot the pH level against the mercury level in our sample of 53 lakes.

```{r}
ggplot(data=FloridaLakes, aes(y=Mercury, x=pH)) + 
  geom_point() + stat_smooth(method="lm", se=FALSE) + 
  xlim(c(3, 10)) + ylim(c(0,1.5))
```

The regression equation is

$$
\widehat{\text{Mercury}} = b_0 + b_1\times\text{pH}
$$

Regression estimates $b_0$ and $b_1$ are shown below.

```{r}
Lakes_M_pH <- lm(data=FloridaLakes, Mercury~pH)
Lakes_M_pH
```

We can use the slope of the regression line $b_1$ to measure the strength relationship between Mercury and pH. Based on our sample, each one-unit increase in pH, mercury level is expected to decrease by 0.15 ppm.

If there was really no relationship, then the slope among all lakes would be 0. But, of course, we would not expect the slope in our sample to exactly match the slope for all lakes. Our question of interest is whether it is plausible that we could have randomly selected a sample resulting in a slope as extreme as 0.15 by chance, when there is actually no relationship between mercury and pH levels, among all lakes. In other words, could we plausible have drawn the sample of 53 lakes shown in blue from a population like the one in red, shown below?

```{r, fig.height=4, fig.width=7, echo=FALSE}
Rx <- runif(1000, 3, 10)
Ry <- runif(1000, 0, 1.5)
pH <- c(Rx, FloridaLakes$pH)
Hg <- c(Ry, FloridaLakes$Mercury)
InSample <- c(rep("No", 1000), rep("Yes", 53))
df <- data.frame(pH, Hg, InSample)
ggplot(data=df, aes(x=pH, y=Hg, color=InSample)) + geom_point() + ylab("Mercury") + 
  xlim(c(3, 10)) + ylim(c(0,1.5))
```

**Key Question:**

-   How likely is it that we would have observed a slope (i.e. a value of $b_1$) as extreme as 0.15 by chance, if there is really no relationship between mercury level and pH?

**Null Hypothesis:** Among all Florida lakes, there is no relationship between mercury level and pH.

**Alternative Hypothesis:** Among all Florida lakes, there is a relationship between mercury level and pH.

**Procedure:**

1.  Randomly shuffle the pH values, so that any relationship between acceleration mercury and pH is due only to chance.

2.  Fit a regression line to the shuffled data and record the slope of the regression line.

3.  Repeat steps 1 and 2 many (say 10,000) times, recording the slope (i.e. value of $b_1$) each time.

4.  Analyze the distribution of slopes, simulated under the assumption that there is no relationship between mercury and pH. Look whether the actual slope we observed is consistent with the simulation results.

We'll illustrate the first three permutations.

**First Permutation**

```{r}
ShuffledLakes <- FloridaLakes    ## create copy of dataset
ShuffledLakes$pH <- ShuffledLakes$pH[sample(1:nrow(ShuffledLakes))] 
```

```{r}
Shuffle1df <- data.frame(ShuffledLakes$Lake, FloridaLakes$Mercury, FloridaLakes$pH, ShuffledLakes$pH)
names(Shuffle1df) <- c("Lake", "Mercury", "pH", "Shuffled_pH")
kable(head(Shuffle1df))
```

The red line indicates the slope of the regression line fit to the shuffled data. The blue line indicates the regression line for the actual lakes in the sampe, which has a slope of -0.15.

```{r}
ggplot(data=Shuffle1df, aes(x=Shuffled_pH, y=Mercury)) + 
  geom_point() + stat_smooth(method="lm", se=FALSE, color="red") + 
  xlim(c(3, 10)) + ylim(c(0,1.5)) + 
  geom_abline(slope=-0.1523, intercept=1.5309, color="blue")
```

Slope of regression line from permuted data:

```{r}
M_Lakes_Shuffle <- lm(data=Shuffle1df, Mercury~Shuffled_pH)
summary(M_Lakes_Shuffle)$coef[2]
```

**Second Permutation**

```{r}
ShuffledLakes <- FloridaLakes    ## create copy of dataset
ShuffledLakes$pH <- ShuffledLakes$pH[sample(1:nrow(ShuffledLakes))] 
```

```{r}
Shuffle2df <- data.frame(ShuffledLakes$Lake, FloridaLakes$Mercury, FloridaLakes$pH, ShuffledLakes$pH)
names(Shuffle2df) <- c("Lake", "Mercury", "pH", "Shuffled_pH")
kable(head(Shuffle2df))
```

```{r}
ggplot(data=Shuffle2df, aes(x=Shuffled_pH, y=Mercury)) + 
  geom_point() + stat_smooth(method="lm", se=FALSE, color="red") + 
  xlim(c(3, 10)) + ylim(c(0,1.5)) + 
  geom_abline(slope=-0.1523, intercept=1.5309, color="blue")
```

Slope of regression line from permuted data:

```{r}
M_Lakes_Shuffle <- lm(data=Shuffle2df, Mercury~Shuffled_pH)
summary(M_Lakes_Shuffle)$coef[2]
```

```{r}
ShuffledLakes <- FloridaLakes    ## create copy of dataset
ShuffledLakes$pH <- ShuffledLakes$pH[sample(1:nrow(ShuffledLakes))] 
```

```{r}
Shuffle3df <- data.frame(ShuffledLakes$Lake, FloridaLakes$Mercury, FloridaLakes$pH, ShuffledLakes$pH)
names(Shuffle3df) <- c("Lake", "Mercury", "pH", "Shuffled_pH")
kable(head(Shuffle3df))
```

```{r}
ggplot(data=Shuffle3df, aes(x=Shuffled_pH, y=Mercury)) + 
  geom_point() + stat_smooth(method="lm", se=FALSE, color="red") + 
  xlim(c(3, 10)) + ylim(c(0,1.5)) + 
  geom_abline(slope=-0.1523, intercept=1.5309, color="blue")
```

Slope of regression line from permuted data:

```{r}
M_Lakes_Shuffle <- lm(data=Shuffle3df, Mercury~Shuffled_pH)
summary(M_Lakes_Shuffle)$coef[2]
```

None of our three simulations resulted in a slope near as extreme as the -0.15 that we saw in the actual data. This seems to suggest that it is unlikely that we would have observed a slope as extreme as -0.15 if there is actually no relationship between mercury and pH among all lakes.

That said, we should repeat the simulation many more times to see whether getting a slope as extreme as -0.15 is plausible.

```{r}
b1 <- Lakes_M_pH$coef[2] ## record value of b1 from actual data

## perform simulation
b1Sim <- rep(NA, 10000)          ## vector to hold results
ShuffledLakes <- FloridaLakes    ## create copy of dataset
for (i in 1:10000){
  #randomly shuffle acceleration times
ShuffledLakes$pH <- ShuffledLakes$pH[sample(1:nrow(ShuffledLakes))] 
ShuffledLakes_M<- lm(data=ShuffledLakes, Mercury ~ pH)   #fit model to shuffled data
b1Sim[i] <- ShuffledLakes_M$coef[2]  ## record b1 from shuffled model
}
Lakes_pHSimulationResults <- data.frame(b1Sim)  #save results in dataframe
```

```{r}
b1 <- Lakes_M_pH$coef[2] ## record value of b1 from actual data
Lakes_pHSimulationResultsPlot <- ggplot(data=Lakes_pHSimulationResults, aes(x=b1Sim)) + 
  geom_histogram(fill="lightblue", color="white") + 
  geom_vline(xintercept=c(b1, -1*b1), color="red") + 
  xlab("Simulated Value of b1") + ylab("Frequency") + 
  ggtitle("Distribution of b1 under assumption of no relationship")
Lakes_pHSimulationResultsPlot
```

**p-value:** Proportion of simulations resulting in value of $b_1$ more extreme than -0.15

```{r}
mean(abs(b1Sim) > abs(b1))
```

The p-value represents the probability of observing a slope as extreme or more extreme than -0.15 by chance when there is actually no relationship between mercury level and pH.

It is extremely unlikely that we would observe a value of $b_1$ as extreme as -0.15 by chance, if there is really no relationship between mercury level and pH. In fact, this never happened in any of our 10,000 simulations!

There is very strong evidence of a relationship mercury level and pH.

A low p-value tells us only that there is evidence of a relationship, not that it is practically meaningful. We have seen that for each one-unit increase in pH, mercury level is expected to decrease by 0.15 ppm on average, which seems like a pretty meaningful decrease, especially considering that mercury levels typically stay between 0 and 1.

We used the slope as our test statistic to measure the evidence of the relationship between the explanatory and response variables. In fact, we could have also used the correlation coefficient $r$ as our test statistic, and we would have gotten the same p-value. Either slope or correlation may be used for a hypothesis test involving two quantitative variables, but we will use slope in this class.

### F-Statistic

Recall when we examined the prices of houses in King County, WA, whose conditions were rated as either very good, good, or average or below. Suppose we want to test the hypotheses:

**Null Hypothesis:** There is no difference in average prices between houses of the three different conditions, among all houses in King County, WA.

**Alternative Hypothesis:** There is a difference in average prices between houses of the three different conditions, among all houses in King County, WA.

Comparative boxplots are shown below.

```{r}
ggplot(data=Houses, aes(x=condition, y=price, fill=condition)) + 
  geom_boxplot(outlier.shape = NA) + geom_jitter(alpha=0.5) + coord_flip() + ggtitle("Houses")
```

```{r}
Cond_Tab <- Houses %>% group_by(condition) %>% summarize(Mean_Price = mean(price), 
                                             SD_Price= sd (price), 
                                             N= n())
kable(Cond_Tab)
```

We notice differences in price. Surprisingly, houses in good condition cost more than 300 thousand dollars more than those in very good condition, on average.

If we were only comparing two groups, we could use the difference in average price between them as a test statistic. But since we're comparing three, we need a statistic that can measure the size of differences between all three groups. An F-statistic can do this, so we'll use the F-statistic as our test statistic here.

We calculated the F-statistic in Chapter 2.

```{r}
M_House_Cond <- lm(data=Houses, price~condition)
M0_House <- lm(data=Houses, price~1)
anova(M_House_Cond, M0_House)$F[2]
```

Our question of interest is "How likely is it to observe an F-statistic as extreme or more extreme than 0.605 if there is actually no difference in average price between houses of the three conditions?"

We'll use a permutation-based hypothesis test to investigate this question.

**Procedure:**

1.  Randomly shuffle the conditions of the houses, so that any relationship between condition and price is due only to chance.

2.  Using the shuffled data, calculate an F-statistic for a predicting price, comparing a full model that uses condition as an explanatory variable, to a reduced model with no explanatory variables.

3.  Repeat steps 1 and 2 many (say 10,000) times, recording the F-statistic each time.

4.  Analyze the distribution of F-statistics, simulated under the assumption that there is no relationship between condition and price. Look whether the actual F-statistic we observed is consistent with the simulation results.

We'll illustrate the first three permutations.

**First Permutation**

```{r}
ShuffledHouses <- Houses    ## create copy of dataset
ShuffledHouses$condition <- ShuffledHouses$condition[sample(1:nrow(ShuffledHouses))] 
```

```{r}
Shuffle1df <- data.frame(Houses$Id, Houses$price, Houses$condition, ShuffledHouses$condition)
names(Shuffle1df) <- c("Id", "price", "condition", "Shuffled_Condition")
kable(head(Shuffle1df))
```

```{r, fig.height=2, fig.width=8}
ggplot(data=ShuffledHouses, aes(x=condition, y=price, fill=condition)) + 
  geom_boxplot(outlier.shape = NA) + geom_jitter(alpha=0.5) + coord_flip() + ggtitle("Shuffled Houses")
```

We fit a model to predict price using condition, and compare it to one that predicts price without using condition, and calculate the F-statistic.

```{r}
M1_Shuffled_Houses <- lm(data=ShuffledHouses, price~condition)
M0_Shuffled_Houses <- lm(data=ShuffledHouses, price~1)
anova(M1_Shuffled_Houses, M0_Shuffled_Houses)$F[2]
```

**Second Permutation**

```{r}
ShuffledHouses <- Houses    ## create copy of dataset
ShuffledHouses$condition <- ShuffledHouses$condition[sample(1:nrow(ShuffledHouses))] 
```

```{r}
Shuffle2df <- data.frame(Houses$Id, Houses$price, Houses$condition, ShuffledHouses$condition)
names(Shuffle2df) <- c("Id", "price", "condition", "Shuffled_Condition")
kable(head(Shuffle2df))
```

```{r, fig.height=2, fig.width=8}
ggplot(data=ShuffledHouses, aes(x=condition, y=price, fill=condition)) + 
  geom_boxplot(outlier.shape = NA) + geom_jitter(alpha=0.5) + coord_flip() + ggtitle("Shuffled Houses")
```

We fit a model to predict price using condition, and compare it to one that predicts price without using condition, and calculate the F-statistic.

```{r}
M1_Shuffled_Houses <- lm(data=ShuffledHouses, price~condition)
M0_Shuffled_Houses <- lm(data=ShuffledHouses, price~1)
anova(M1_Shuffled_Houses, M0_Shuffled_Houses)$F[2]
```

**Third Permutation**

```{r}
ShuffledHouses <- Houses    ## create copy of dataset
ShuffledHouses$condition <- ShuffledHouses$condition[sample(1:nrow(ShuffledHouses))] 
```

```{r}
Shuffle3df <- data.frame(Houses$Id, Houses$price, Houses$condition, ShuffledHouses$condition)
names(Shuffle3df) <- c("Id", "price", "condition", "Shuffled_Condition")
kable(head(Shuffle1df))
```

```{r, fig.height=2, fig.width=8}
ggplot(data=ShuffledHouses, aes(x=condition, y=price, fill=condition)) + 
  geom_boxplot(outlier.shape = NA) + geom_jitter(alpha=0.5) + coord_flip() + ggtitle("Shuffled Houses")
```

We fit a model to predict price using condition, and compare it to one that predicts price without using condition, and calculate the F-statistic.

```{r}
M1_Shuffled_Houses <- lm(data=ShuffledHouses, price~condition)
M0_Shuffled_Houses <- lm(data=ShuffledHouses, price~1)
anova(M1_Shuffled_Houses, M0_Shuffled_Houses)$F[2]
```

We'll simulate 10,000 permutations and record the F-statistic for each set of permuted data.

```{r}
Fstat <- anova(M_House_Cond, M0_House)$F[2] ## record value of F-statistic from actual data

## perform simulation
FSim <- rep(NA, 10000)          ## vector to hold results
ShuffledHouses <- Houses    ## create copy of dataset
for (i in 1:10000){
  #randomly shuffle acceleration times
ShuffledHouses$condition <- ShuffledHouses$condition[sample(1:nrow(ShuffledHouses))] 
ShuffledHouses_M1<- lm(data=ShuffledHouses, price ~ condition)  #fit full model to shuffled data
ShuffledHouses_M0<- lm(data=ShuffledHouses, price ~ 1)  #fit reduced model to shuffled data
FSim[i] <- anova(ShuffledHouses_M1, ShuffledHouses_M0)$F[2]  ## record F from shuffled model
}
House_Cond_SimulationResults <- data.frame(FSim)  #save results in dataframe
```

The distribution of the F-statistics is shown below. Recall that these are simulated under the assumption that there is no difference in average price between houses of the three different conditions, i.e. no relationship between price and condition.

The red line shows the location of the F-statistic we saw in our data (0.60). Since F-statistics cannot be negative, we don't need to worry about finding an F-statistic as extreme in the opposite direction.

```{r, fig.height=2}
House_Cond_SimulationResults_Plot <- ggplot(data=House_Cond_SimulationResults, 
                                            aes(x=FSim)) + 
  geom_histogram(fill="lightblue", color="white") +  geom_vline(xintercept=c(Fstat), color="red") + 
  xlab("Simulated Value of F") + ylab("Frequency") +  ggtitle("Distribution of F under assumption of no relationship")
House_Cond_SimulationResults_Plot
```

The F-statistic in our actual we observed does not appear to be very extreme.

**p-value:** Proportion of simulations resulting in value of F more extreme than 0.60.

```{r}
mean(FSim > Fstat)
```

The p-value represents the probability of observing an F-statistic as extreme as 0.60 by chance, in samples of size 61, 30, and 9, if in fact there is no relationship between price and size of car.

More than half of our simulations resulted in an F-statistic as extreme or more extreme than the one we saw in our actual data, even though the simulation was performed in a situation where there was no relationship between price and condition. Thus, it is very plausible that we would observe an F-statistic as extreme or more extreme than we saw in our data, even if there is no relationship between price and condition (or no difference in average price between the conditions), among all houses.

Since the p-value is large, we cannot reject the null hypothesis. We do not have evidence to say that average price differs between houses of the different condition types.

It is important to note that we are not saying that we believe the average price is the same for each condition. Recall that the average prices among the conditions in our sample differed by more than 300 thousand dollars! It's just that given the size of our samples, and the amount of variability in our data, we cannot rule out the possibility that this difference occurred purely by chance.

\newpage

## Responsible Hypothesis Testing

While hypothesis tests are a powerful tool in statistics, they are also one that has been widely misused, to the detriment of scientific research. The hard caused by these misuses caused the American Statistical Association to release a [2016 statement](https://www.amstat.org/asa/files/pdfs/p-valuestatement.pdf), intended to provide guidance and clarification to scientists who use hypothesis testing and p-values in their research.

The statement provides the following six principles for responsible use of hypothesis tests and p-values.

1.  P-values can indicate how incompatible the data are with a specified statistical model.

2.  P-values do not measure the probability that the studied hypothesis is true, or the probability that the data were produced by random chance alone.

3.  Scientific conclusions and business or policy decisions should not be based only on whether a p-value passes a specific threshold.

4.  Proper inference requires full reporting and transparency.

5.  A p-value, or statistical significance, does not measure the size of an effect or the importance of a result.

6.  By itself, a p-value does not provide a good measure of evidence regarding a model or hypothesis.

The statement provides important guidance for us to consider as we work with hypothesis testing in this class, as well as in future classes and potentially in our own research.

-   A hypothesis test can only tell us the strength of evidence against the null hypothesis. The absence of evidence against the null hypothesis should not be interpreted as evidence for the null hypothesis.

-   We should never say that the data support/prove/confirm the null hypothesis.

-   We can only say that the data do not provide evidence against the null hypothesis.

**What to conclude from p-values and what not to:**

-   A low p-value provides evidence against the null hypothesis. It suggests the test statistic we observed is inconsistent with the null hypothesis.

-   A low p-value does **not** tell us that the difference or relationship we observed is meaningful in a practical sense. Researchers should look at the size of the difference or strength of the relationship in the sample before deciding whether it merits being acted upon.

-   A high p-value means that the data could have plausibly been obtained when the null hypothesis is true. The test statistic we observed is consistent with what we would have expected to see when the null hypothesis is true, and thus we cannot rule out the null hypothesis.

-   A high p-value does **not** mean that the null hypothesis is true or probably true. A p-value can only tell us the strength of evidence against the null hypothesis, and should never be interpreted as support for the null hypothesis.

Just because our result is consistent with the null hypothesis does not mean that we should believe that null hypothesis is true. Lack of evidence against a claim does not necessarily mean that the claim is true.

In this scenario, we got a small p-value, but we should also be aware of what we should conclude if the p-value is large. Remember that the p-value only measures the strength of evidence *against* the null hypothesis. A large p-value means we lack evidence against the null hypothesis. This does not mean, however, that we have evidence *supporting* null hypothesis.

A hypothesis test can be thought of as being analogous to a courtroom trial, where the null hypothesis is that the defendant did not commit the crime. Suppose that after each side presents evidence, the jury remains unsure whether the defendant committed the crime. Since the jury does not have enough evidence to be sure, they must, under the law of the United States find the defendant "not guilty." This does not mean that the jury thinks the defendant is innocent, only that they do not have enough evidence to be sure they are guilty. Similarly in a hypothesis test, a large p-value indicates a lack of evidence against the null hypothesis, rather than evidence supporting it. As such, we should avoid statements suggesting we "support", "accept", or "believe" the null hypothesis, and simply state that we lack evidence against it.

**Things to say when the p-value is large:**

-   The data are consistent with the null hypothesis.\
-   We do not have enough evidence against the null hypothesis.\
-   We cannot reject the null hypothesis.\
-   The null hypothesis is plausible.

**Things NOT to say when the p-value is large:**

-   The data support the null hypothesis.\
-   The data provide evidence for the null hypothesis.\
-   We accept the null hypothesis.\
-   We conclude that the null hypothesis is true.

Thus, if we had obtained a large p-value in the comparison in mercury levels between Northern and Southern lakes, the appropriate conclusion would be

"We do not have evidence that the average mercury level differs between lakes in Northern Florida, compared to Southern Florida."

Even if we got a large p-value it would be incorrect to say "There is no difference in average mercury levels between lakes in Northern Florida and Southern Florida."

We would just be saying that given the size of our sample and the amount of variability on the date, we cannot rule out the possibility of observing a difference like we did by chance, when there really is no difference.

```{r, echo=FALSE}
#save.image(file = "Environment.RData")
```
